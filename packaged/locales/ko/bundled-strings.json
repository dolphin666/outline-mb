{
  "AcceleratorRange.EightG": "가속도센서를 이용해, 중력가속도의 8배(8g) 가 넘는 지를 측정합니다.",
  "AcceleratorRange.EightG|block": "가속도 8g",
  "AcceleratorRange.FourG": "가속도센서를 이용해, 중력가속도의 4배(4g) 가 넘는 지를 측정합니다.",
  "AcceleratorRange.FourG|block": "가속도 4g",
  "AcceleratorRange.OneG": "가속도센서를 이용해, 중력가속도(1g) 가 넘는 지를 측정합니다.",
  "AcceleratorRange.OneG|block": "가속도 1g",
  "AcceleratorRange.TwoG": "가속도센서를 이용해, 중력가속도의 2배(2g) 가 넘는 지를 측정합니다.",
  "AcceleratorRange.TwoG|block": "가속도 2g",
  "AnalogPin.P11|block": "P11 (출력 전용)",
  "AnalogPin.P12|block": "P12 (출력 전용)",
  "AnalogPin.P13|block": "P13 (출력 전용)",
  "AnalogPin.P14|block": "P14 (출력 전용)",
  "AnalogPin.P15|block": "P15 (출력 전용)",
  "AnalogPin.P16|block": "P16 (출력 전용)",
  "AnalogPin.P19|block": "P19 (출력 전용)",
  "AnalogPin.P20|block": "P20 (출력 전용)",
  "AnalogPin.P5|block": "P5 (출력 전용)",
  "AnalogPin.P6|block": "P6 (출력 전용)",
  "AnalogPin.P7|block": "P7 (출력 전용)",
  "AnalogPin.P8|block": "P8 (출력 전용)",
  "AnalogPin.P9|block": "P9 (출력 전용)",
  "Array": "리스트에 들어있는 값들을 추가, 삭제, 변경합니다.",
  "Array.concat": "다른 배열과 연결시켜 합칩니다.",
  "Array.concat|param|arr": "연결시킬 다른 배열",
  "Array.every": "배열에 들어있는 모든 값들이, 제공된 함수에 의해서 구현된 테스트를 통과하는지 검사합니다.",
  "Array.every|param|callbackfn": "매개 변수를 2개까지 사용할 수 있는 함수입니다. 모든 매서드는 배열에 저장되어있는 각 값에 대해서 callbackfn 함수를 한 번씩 호출합니다.",
  "Array.fill": "원하는 값을 배열의 원하는 시작 위치부터 끝 위치까지 채웁니다. 참조번호는 포함되지 않습니다.",
  "Array.filter": "콜백 함수에 의해 지정된 조건을 만족하는, 배열에 저장되어있는 값들을 리턴합니다.",
  "Array.filter|param|callbackfn": "매개 변수를 2개까지 사용할 수 있는 함수입니다. filter 매서드는 배열에 저장되어있는 각 값에 대해서 callbackfn 함수를 한 번씩 호출합니다.",
  "Array.find": "배열에 저장되어있는 값들 중에서 테스트 함수를 만족시키는 첫 번째 값을 리턴합니다. 만족시키는 값이 없을 경우 undefined 가 리턴됩니다.",
  "Array.forEach": "배열에 저장되어있는 각 값에 대해 실행시킬 콜백 함수를 호출합니다.",
  "Array.forEach|param|callbackfn": "매개 변수를 2개까지 사용할 수 있는 함수입니다. forEach 매서드는 배열에 저장되어있는 각 값에 대해서 callbackfn 함수를 한 번씩 호출합니다.",
  "Array.get": "원하는 위치에 저장되어있는 값을 가져옵니다.",
  "Array.get|param|index": "리스트에서 저장되어있는 값을 가져올 위치번호(0번 부터 시작), 예시: 0",
  "Array.indexOf": "배열에서 그 값이 처음 나타난 위치번호를 찾아 리턴합니다.",
  "Array.indexOf|block": "%list|에서 %value|값의 위치",
  "Array.indexOf|param|fromIndex": "검색을 시작할 위치를 나타내는 번호입니다. 시작 번호를 생략하면 0 번째 위치부터 검색을 시작합니다.",
  "Array.indexOf|param|item": "배열에 저장시킬 값.",
  "Array.insertAt": "원하는 위치에 값을 삽입하고, 배열을 길이를 1만큼 증가시킵니다",
  "Array.insertAt|block": "%list|의 %index|번째 위치에 %value 삽입",
  "Array.insertAt|param|index": "리스트에서 값을 삽입할 위치번호(0번 부터 시작), 예시: 0",
  "Array.isArray": "주어진 객체가 배열인지 확인합니다.",
  "Array.join": "문자열들을 모두 연결해 하나로 만든 후, 만들어진 문자열을 리턴합니다.",
  "Array.join|param|sep": "문자열 구분 기호",
  "Array.length": "배열의 길이를 가져오거나 설정합니다. 이 값은 배열의 마지막 위치 번호 1만큼 큰 수입니다.",
  "Array.length|block": "%VALUE 의 길이",
  "Array.map": "배열에 저장되어있는 각 값을 처리하기 위한 콜백 함수를 호출한 후, 그 결과가 저장된 배열을 리턴합니다.",
  "Array.map|param|callbackfn": "매개 변수를 2개까지 사용할 수 있는 함수입니다. map 매서드는 배열에 저장되어있는 각 값에 대해서 callbackfn 함수를 한 번씩 호출합니다.",
  "Array.pop": "배열의 마지막에 저장되어있는 값을 리턴하고, 그 값을 배열에서 제거합니다.",
  "Array.pop|block": "%list 의 마지막 위치에서 잘라낸 값",
  "Array.push": "배열의 마지막에 새로운 값을 추가합니다.",
  "Array.push|block": "%list|의 마지막 위치에 %value|추가",
  "Array.reduce": "배열에 저장되어있는 모든 값들을 처리하기 위한 특정 콜백 함수를 호출합니다. 콜백 함수를 통해 리턴되는 값은 모든 결과가 들어있는 결과값으로 콜백 함수 옆에 제공되어있습니다.",
  "Array.reduce|param|callbackfn": "매개 변수를 3개까지 사용할 수 있는 함수입니다. reduce 매서드는 배열에 저장되어있는 각 값에 대해서 callbackfn 함수를 한 번씩 호출합니다.",
  "Array.reduce|param|initialValue": "결과값을 저장해 넣을 초기값. callbackfn 함수를 실행시켰을 때 배열 대신 사용합니다.",
  "Array.removeAt": "배열에서 원하는 위치에 있는 값을 삭제합니다.",
  "Array.removeAt|block": "%list|의 %index 번째 위치의 값을 삭제한 후의 길이",
  "Array.removeElement": "개체에 들어있는 첫 번째 데이터를 삭제합니다. 정상적으로 삭제된 경우 true(참)를 리턴합니다.",
  "Array.reverse": "배열에 저장되어있는 값들의 순서를 반대로 바꿉니다. 첫 번째 위치에 있는 값은 마지막 위치로 이동되고, 마지막 위치에 있는 값은 첫 번째 위치로 이동됩니다.",
  "Array.reverse|block": "%list 에서 값들의 순서를 반대로 바꿈",
  "Array.set": "지정한 위치에 값을 저장합니다.",
  "Array.set|param|index": "리스트 저장 위치 번호로서 0부터 시작합니다. 예시: 0",
  "Array.shift": "배열의 처음에 저장되어있는 값을 리턴하고, 그 값을 배열에서 제거합니다.",
  "Array.shift|block": "%list 의 첫번째 위치에서 잘라낸 값",
  "Array.slice": "배열의 일부를 리턴합니다.",
  "Array.slice|param|end": "원하는 개수. 예시: 0",
  "Array.slice|param|start": "시작 위치. 예시: 0",
  "Array.some": "배열에 들어있는 모든 값들 중 하나라도, 제공된 함수에 의해서 구현된 테스트를 통과하는지 검사합니다.",
  "Array.some|param|callbackfn": "매개 변수를 2개까지 사용할 수 있는 함수입니다. 몇 몇 매서드는 배열에 저장되어있는 각 값에 대해서 callbackfn 함수를 한 번씩 호출합니다.",
  "Array.sort": "배열에 저장되어있는 값들을 정렬한 후 리턴합니다. 정렬은 정확하지 않을 수 있습니다.",
  "Array.splice": "배열에 저장되어있는 값들을 삭제합니다.",
  "Array.splice|param|deleteCount": "잘라낼 개수. 예시: 0",
  "Array.splice|param|start": "배열에서 잘라낼 시작 위치 번호. 예시: 0",
  "Array.unshift": "배열의 첫 번째 위치에 새 데이터를 삽입하고, 배열의 길이를 리턴합니다.",
  "Array.unshift|block": "%list|의 첫번째 위치에 %value|를 삽입한 후의 길이",
  "Array@type": "리스트에 들어있는 값들을 추가, 삭제, 변경합니다.",
  "Array|block": "배열",
  "ArrowNames.East|block": "동쪽",
  "ArrowNames.NorthEast|block": "북동쪽",
  "ArrowNames.NorthWest|block": "북서쪽",
  "ArrowNames.North|block": "북쪽",
  "ArrowNames.SouthEast|block": "남동쪽",
  "ArrowNames.SouthWest|block": "남서쪽",
  "ArrowNames.South|block": "남쪽",
  "ArrowNames.West|block": "서쪽",
  "BaudRate.BaudRate115200|block": "115200",
  "BaudRate.BaudRate1200|block": "1200",
  "BaudRate.BaudRate14400|block": "14400",
  "BaudRate.BaudRate19200|block": "19200",
  "BaudRate.BaudRate2400|block": "2400",
  "BaudRate.BaudRate28800|block": "28800",
  "BaudRate.BaudRate31250|block": "31250",
  "BaudRate.BaudRate38400|block": "38400",
  "BaudRate.BaudRate4800|block": "4800",
  "BaudRate.BaudRate57600|block": "57600",
  "BaudRate.BaudRate9600|block": "9600",
  "BeatFraction.Breve|block": "4",
  "BeatFraction.Double|block": "2",
  "BeatFraction.Eighth|block": "1/8",
  "BeatFraction.Half|block": "1/2",
  "BeatFraction.Quarter|block": "1/4",
  "BeatFraction.Sixteenth|block": "1/16",
  "BeatFraction.Whole|block": "1",
  "Boolean.toString": "불 값을 true, false 문자열로 바꿔 리턴합니다.",
  "Buffer.fill": "입력한 값으로 버퍼(일부)를 채웁니다.",
  "Buffer.getNumber": "버퍼에 특정 형식으로 저장되어있는 수를 읽어옵니다.",
  "Buffer.length": "버퍼에 저장되어있는 데이터의 개수를 리턴합니다.",
  "Buffer.rotate": "버퍼에 저장되어있는 값들을 왼쪽으로 회전시킵니다.\n\n\n\n시작. 예시: -1",
  "Buffer.rotate|param|length": "버퍼에 들어있는 항목의 개수. 음수이면, 버퍼 마지막부터 왼쪽 방향으로의 위치를 의미합니다.",
  "Buffer.rotate|param|offset": "시프트 시킬 개수; 오른쪽으로 시프트 시키는 경우에는 음수 사용",
  "Buffer.rotate|param|start": "버퍼 내용을 읽어들일 시작(offset) 위치. 기본은 0.",
  "Buffer.setNumber": "특정 포맷에 따라 수를 버퍼에 기록합니다.",
  "Buffer.shift": "현재 버퍼에 저장되어있는 값들을 왼쪽으로 시프트 시킵니다.\n\n\n\n시작. 예시: -1",
  "Buffer.shift|param|length": "버퍼에 들어있는 항목의 개수. 음수이면, 버퍼 마지막부터 왼쪽 방향으로의 위치를 의미합니다.",
  "Buffer.shift|param|offset": "시프트 시킬 개수; 오른쪽으로 시프트 시키는 경우에는 음수 사용",
  "Buffer.shift|param|start": "버퍼 내용을 읽어들일 시작(offset) 위치. 기본은 0.",
  "Buffer.slice": "버퍼에 저장되어있는 값의 일부를 잘라 리턴합니다.",
  "Buffer.toHex": "버퍼에 저장되어있는 값을 16진수 표현으로 변환합니다.",
  "Buffer.toString": "어떤 버퍼에 들어잇는 값들을 UTF8 포맷의 문자열로 읽어들입니다.",
  "Buffer.write": "현재 버퍼의 `dstOffset` 위치에 `src` 값을 기록합니다.",
  "Button.AB|block": "A+B",
  "Delimiters.Colon|block": ":",
  "Delimiters.Comma|block": ",",
  "Delimiters.Dollar|block": "$",
  "Delimiters.Fullstop|block": ".",
  "Delimiters.Hash|block": "#",
  "Delimiters.NewLine|block": "엔터",
  "Dimension.Strength|block": "크기",
  "Dimension.X|block": "x축",
  "Dimension.Y|block": "y축",
  "Dimension.Z|block": "z축",
  "Direction.Left|block": "왼쪽",
  "Direction.Right|block": "오른쪽",
  "DisplayMode.BlackAndWhite|block": "흑백",
  "DisplayMode.Greyscale|block": "그레이 스케일",
  "EventCreationMode": "이벤트를 생성하는 방법.",
  "EventCreationMode.CreateAndFire": "MicroBitEvent 가 초기화되고, 이벤트 처리기도 삭제되었습니다.(인터럽트 도중에 사용하는 것은 적절하지 않습니다!)",
  "EventCreationMode.CreateOnly": "MicroBitEvent 가 초기화되고, 더 이상 남아있는 작업이 없습니다.",
  "Gesture.EightG": "가속도가 8g 이상이 되면 실행됩니다.",
  "Gesture.EightG|block": "가속도 8g",
  "Gesture.FreeFall": "자유 낙하가 되면 신호가 발생합니다!",
  "Gesture.FreeFall|block": "자유 낙하",
  "Gesture.LogoDown": "보드를 세웠을 때, 로고가 땅 방향이 되면 신호가 발생합니다.",
  "Gesture.LogoDown|block": "로고 땅 방향",
  "Gesture.LogoUp": "보드를 세웠을 때, 로고가 하늘 방향이 되면 신호가 발생합니다.",
  "Gesture.LogoUp|block": "로고 하늘 방향",
  "Gesture.ScreenDown": "보드를 바닥에 놓았을 때, 스크린이 하늘 방향이 되면 신호가 발생합니다.",
  "Gesture.ScreenDown|block": "스크린 땅 방향",
  "Gesture.ScreenUp": "보드를 바닥에 놓았을 때, 스크린이 땅 방향이 되면 신호가 발생합니다.",
  "Gesture.ScreenUp|block": "스크린 하늘 방향",
  "Gesture.Shake": "흔들면 신호가 발생합니다.",
  "Gesture.Shake|block": "흔들림",
  "Gesture.SixG": "가속도가 6g 이상이 되면 실행됩니다.",
  "Gesture.SixG|block": "가속도 6g",
  "Gesture.ThreeG": "가속도가 3g 이상이 되면 실행됩니다.",
  "Gesture.ThreeG|block": "가속도 3g",
  "Gesture.TiltLeft": "스크린이 왼쪽 방향으로 기울어지면 신호가 발생합니다.",
  "Gesture.TiltLeft|block": "왼쪽 기울임",
  "Gesture.TiltRight": "스크린이 오른쪽 방향으로 기울어지면 신호가 발생합니다.",
  "Gesture.TiltRight|block": "오른쪽 기울임",
  "IconNames.Angry|block": "화남",
  "IconNames.Asleep|block": "잠듦",
  "IconNames.Butterfly|block": "나비",
  "IconNames.Chessboard|block": "체스판",
  "IconNames.Confused|block": "당황",
  "IconNames.Cow|block": "젖소",
  "IconNames.Diamond|block": "다이아몬드",
  "IconNames.Duck|block": "오리",
  "IconNames.EigthNote|block": "8분 음표",
  "IconNames.Fabulous|block": "놀라움",
  "IconNames.Ghost|block": "유령",
  "IconNames.Giraffe|block": "기린",
  "IconNames.Happy|block": "행복함",
  "IconNames.Heart|block": "하트",
  "IconNames.House|block": "집",
  "IconNames.LeftTriangle|block": "왼쪽 방향 삼각형",
  "IconNames.Meh|block": "지루함",
  "IconNames.No|block": "틀림",
  "IconNames.Pitchfork|block": "쇠스랑",
  "IconNames.QuarterNote|block": "4분 음표",
  "IconNames.Rabbit|block": "토끼",
  "IconNames.Rollerskate|block": "롤러 스케이트",
  "IconNames.Sad|block": "슬픔",
  "IconNames.Scissors|block": "가위",
  "IconNames.Silly|block": "바보",
  "IconNames.Skull|block": "해골",
  "IconNames.SmallDiamond|block": "작은 다이아몬드",
  "IconNames.SmallHeart|block": "작은 하트",
  "IconNames.SmallSquare|block": "작은 사각형",
  "IconNames.Snake|block": "뱀",
  "IconNames.Square|block": "사각형",
  "IconNames.StickFigure|block": "막대기 사람",
  "IconNames.Surprised|block": "놀람",
  "IconNames.Sword|block": "칼",
  "IconNames.TShirt|block": "티셔츠",
  "IconNames.Target|block": "과녁",
  "IconNames.Tortoise|block": "거북이",
  "IconNames.Triangle|block": "삼각형",
  "IconNames.Umbrella|block": "우산",
  "IconNames.Yes|block": "맞음",
  "Image.clear": "모든 LED 픽셀을 끕니다.",
  "Image.height": "이미지의 세로 방향 크기(높이)를 가져옵니다. (항상 5입니다.)",
  "Image.pixel": "``(x,y)`` 위치에 있는 LED 상태(on/off)를 읽어옵니다.",
  "Image.pixelBrightness": "원하는 위치에 있는 LED의 밝기([0..255])를 읽어옵니다.",
  "Image.pixel|param|x": "픽셀 열 번호",
  "Image.pixel|param|y": "픽셀 행 번호",
  "Image.plotFrame": "이미지의 ``index`` 번째 위치부터 LED 스크린에 출력합니다.",
  "Image.plotFrame|param|xOffset": "이미지의 가로 방향 출력 시작 위치 번호",
  "Image.plotImage": "이미지의 원하는 위치부터 스크린에 출력합니다.",
  "Image.scrollImage": "이미지를 스크롤합니다.",
  "Image.scrollImage|block": "%sprite(myImage)|의 %frameoffset|번 위치부터 %delay (ms) 마다 스크롤",
  "Image.scrollImage|param|frameOffset": "애니메이션으로 출력하기 시작할 수 있는 단계별 위치, 예시: 1, 2, 5",
  "Image.scrollImage|param|interval": "애니메이션 화면 갱신 주기(밀리초), 예시: 200",
  "Image.setPixel": "``(x,y)`` 위치의 LED 픽셀 상태를 설정합니다.",
  "Image.setPixelBrightness": "지정한 위치에 있는 LED 픽셀의 밝기를 설정합니다.",
  "Image.setPixel|param|value": "픽셀 상태",
  "Image.setPixel|param|x": "픽셀 열 번호",
  "Image.setPixel|param|y": "픽셀 행 번호",
  "Image.showFrame": "이미지 스트립에서 원하는 프레임을 출력합니다.",
  "Image.showFrame|param|frame": "출력할 이미지 프레임",
  "Image.showImage": "이미지의 ``x offset`` 번째 픽셀 위치부터 출력합니다.",
  "Image.showImage|block": "%sprite(myImage)|의 %offset 번 위치부터 출력",
  "Image.showImage|param|xOffset": "이미지의 가로 방향 출력 시작 위치 번호",
  "Image.width": "이미지의 가로 방향 픽셀 길이를 읽어옵니다.",
  "LedSpriteProperty.Blink|block": "깜박임 속도",
  "LedSpriteProperty.Brightness|block": "스프라이트 밝기",
  "LedSpriteProperty.Direction|block": "이동방향 각도",
  "LedSpriteProperty.X|block": "x좌표",
  "LedSpriteProperty.Y|block": "y좌표",
  "Math": "더 복잡한 계산.",
  "Math.abs": "(그 값의 부호와 상관없이) 어떤 수의 절댓값을 리턴합니다.\n예를 들어, -5와 5의 절댓값은 모두 5입니다.",
  "Math.abs|param|x": "절댓값을 구할 수.",
  "Math.acos": "입력된 값의 아크코사인 값을 (라디안 단위로) 리턴합니다.",
  "Math.acos|param|x": "수",
  "Math.asin": "입력된 값의 아크사인 값을 (라디안 단위로) 리턴합니다.",
  "Math.asin|param|x": "수",
  "Math.atan": "입력된 값의 아크탄젠트 값을 (라디안 단위로) 리턴합니다.",
  "Math.atan2": "입력된 값의 비율에 따른 아크탄젠트2 값을 리턴합니다.",
  "Math.atan2|param|x": "수",
  "Math.atan2|param|y": "수",
  "Math.atan|param|x": "수",
  "Math.ceil": "입력된 값보다 크거나 같은 가장 작은 정수를 리턴합니다.",
  "Math.ceil|param|x": "수",
  "Math.constrain": "입력한 값을 지정한 범위 이내로 바꿈",
  "Math.constrain|block": "범위 제한(constrain): %value|을 %low|~ %high 범위로 바꾼 값",
  "Math.cos": "입력된 값의 코사인 값을 리턴합니다.",
  "Math.cos|param|x": "각도(라디안)",
  "Math.exp": "``e^x``값을 리턴합니다.",
  "Math.exp|param|x": "수",
  "Math.floor": "입력된 값보다 작거나 같은 가장 큰 정수를 리턴합니다.",
  "Math.floor|param|x": "수",
  "Math.icos": "입력한 각도의 코사인 값을 리턴합니다. 8비트 근사값입니다.",
  "Math.icos|param|theta": "입력 각도 0-255",
  "Math.idiv": "첫 번째 수를 두 번째 수로 나눈 32비트 정수 값을 리턴합니다.",
  "Math.idiv|param|x": "첫 번째 수",
  "Math.idiv|param|y": "두 번째 수",
  "Math.imul": "첫 번째 수와 두 번째 수를 곱한 32비트 정수 값을 리턴합니다.",
  "Math.imul|param|x": "첫 번째 수",
  "Math.imul|param|y": "두 번째 수",
  "Math.isin": "입력한 각도의 사인 값을 리턴합니다. 8비트 근사값입니다.",
  "Math.isin|param|theta": "입력 각도 0-255",
  "Math.log": "입력한 수의 자연(e)로그 값을 리턴합니다.",
  "Math.log|param|x": "수",
  "Math.map": "어떤 범위 안에 들어있는 값을 다른 범위의 값으로 비례적으로 변환(매핑)합니다. 즉,``현재 범위의 최솟값`` 은 ``변환시킬 범위의 최솟값``으로, ``현재 범위의 최댓값`` 은 ``변환시킬 범위의 최댓값``으로 범위가 변경되고, 현재 입력 값을 새로운 범위에 있는 변환 값으로 비례적으로 변환합니다.",
  "Math.map|block": "비례 변환(map): %value 을|%fromLow|~%fromHigh|에서 %toLow|~ %toHigh 범위로 변환한 값",
  "Math.map|param|fromHigh": "현재 범위의 최댓값, 예시: 1023",
  "Math.map|param|fromLow": "현재 범위의 최솟값",
  "Math.map|param|toHigh": "변환시킬 범위의 최댓값, 예시: 4",
  "Math.map|param|toLow": "변환시킬 범위의 최솟값",
  "Math.map|param|value": "비례적으로 변환시킬 현재 값",
  "Math.max": "두 수 중 작지 않은 값을 리턴합니다.",
  "Math.min": "두 수 중 크지 않은 값을 리턴합니다.",
  "Math.pow": "거듭제곱을 계산해 리턴합니다.",
  "Math.pow|param|x": "거듭제곱 할 값.",
  "Math.pow|param|y": "거듭제곱 할 횟수(지수).",
  "Math.random": "0 이상 1 이하의 랜덤 값을 리턴합니다.",
  "Math.randomBoolean": "'참(true)' 또는 '거짓(false)' 값을 랜덤으로 리턴합니다. 동전을 던져 나온 면을 확인하는 것과 비슷합니다.",
  "Math.randomBoolean|block": "참(true) 또는 거짓(false)의 불 랜덤값",
  "Math.randomRange": "입력한 최솟값 이상 최댓값 이하 범위에서 랜덤으로 값이 리턴됩니다.\n입력한 범위 값이 모두 정수이면 랜덤으로 리턴되는 수도 정수가 됩니다.",
  "Math.randomRange|block": "%min|부터 %limit 까지의 정수 랜덤값",
  "Math.randomRange|param|max": "랜덤 최댓값, 예시: 10",
  "Math.randomRange|param|min": "랜덤 최솟값, 예시: 0",
  "Math.round": "입력한 수를 정수로 반올림한 값을 리턴합니다.",
  "Math.roundWithPrecision": "입력한 수 ``x`` 를 원하는 ``digits``의 자릿수로 반올림 합니다.",
  "Math.roundWithPrecision|param|digits": "반올림해서 만들 자릿수",
  "Math.roundWithPrecision|param|x": "반올림 할 수",
  "Math.round|param|x": "반올림할 값",
  "Math.sign": "입력된 수의 부호를 리턴합니다.",
  "Math.sign|param|x": "수",
  "Math.sin": "입력된 값의 사인 값을 리턴합니다.",
  "Math.sin|param|x": "각도(라디안)",
  "Math.sqrt": "입력된 값의 제곱근 값을 리턴합니다.",
  "Math.sqrt|param|x": "수",
  "Math.tan": "입력된 값의 탄젠트 값을 리턴합니다.",
  "Math.tan|param|x": "각도(라디안)",
  "Math.trunc": "입력된 값의 정수 부분만 리턴합니다.",
  "Math.trunc|param|x": "수",
  "Math|block": "계산",
  "Melodies.BaDing|block": "바 딩 멜로디",
  "Melodies.Baddy|block": "나쁜 멜로디",
  "Melodies.Birthday|block": "생일 멜로디",
  "Melodies.Blues|block": "블루스 멜로디",
  "Melodies.Chase|block": "뒤쫓는 멜로디",
  "Melodies.Dadadadum|block": "다다둠 멜로디",
  "Melodies.Entertainer|block": "엔터테이너 멜로디",
  "Melodies.Funeral|block": "장례식 멜로디",
  "Melodies.Funk|block": "펑크 멜로디",
  "Melodies.JumpDown|block": "뛰어 내리는 멜로디",
  "Melodies.JumpUp|block": "뛰어 오르는 멜로디",
  "Melodies.Nyan|block": "냥 멜로디",
  "Melodies.Ode|block": "시 낭송 멜로디",
  "Melodies.PowerDown|block": "전원 끄는 멜로디",
  "Melodies.PowerUp|block": "전원 켜는 멜로디",
  "Melodies.Prelude|block": "전주곡 멜로디",
  "Melodies.Punchline|block": "펀치라인 멜로디",
  "Melodies.Ringtone|block": "전화벨 멜로디",
  "Melodies.Wawawawaa|block": "와와와와아 멜로디",
  "Melodies.Wedding|block": "결혼식 멜로디",
  "MelodyOptions.ForeverInBackground|block": "백그라운드로 무한",
  "MelodyOptions.Forever|block": "무한",
  "MelodyOptions.OnceInBackground|block": "백그라운드로 한 번",
  "MelodyOptions.Once|block": "한 번",
  "MelodyStopOptions.All|block": "모든",
  "MelodyStopOptions.Background|block": "백그라운드",
  "MelodyStopOptions.Foreground|block": "실행중인",
  "MesAlertEvent.DisplayToast|block": "팝업 표시",
  "MesAlertEvent.FindMyPhone|block": "내 스마트폰 찾기",
  "MesAlertEvent.PlayRingtone|block": "벨 소리 재생",
  "MesAlertEvent.PlaySound|block": "사운드 재생",
  "MesAlertEvent.RingAlarm2|block": "벨소리 경보2",
  "MesAlertEvent.RingAlarm3|block": "벨소리 경보3",
  "MesAlertEvent.RingAlarm4|block": "벨소리 경보4",
  "MesAlertEvent.RingAlarm5|block": "벨소리 경보5",
  "MesAlertEvent.RingAlarm6|block": "벨소리 경보6",
  "MesAlertEvent.RingAlarm|block": "벨소리 경보",
  "MesAlertEvent.Vibrate|block": "진동 경보",
  "MesCameraEvent.LaunchPhotoMode|block": "사진 촬영 모드 시작",
  "MesCameraEvent.LaunchVideoMode|block": "동영상 촬영 모드 시작",
  "MesCameraEvent.StartVideoCapture|block": "동영상 녹화 시작",
  "MesCameraEvent.StopPhotoMode|block": "사진 촬영 모드 종료",
  "MesCameraEvent.StopVideoCapture|block": "동영상 녹화 종료",
  "MesCameraEvent.StopVideoMode|block": "동영상 촬영 모드 종료",
  "MesCameraEvent.TakePhoto|block": "사진 찍기",
  "MesCameraEvent.ToggleFrontRear|block": "카메라 전환(앞-뒤)",
  "MesDeviceInfo.DisplayOff|block": "화면 끔",
  "MesDeviceInfo.DisplayOn|block": "화면 켬",
  "MesDeviceInfo.IncomingCall|block": "전화 수신",
  "MesDeviceInfo.IncomingMessage|block": "메시지 수신",
  "MesDeviceInfo.OrientationLandscape|block": "가로 모드 회전",
  "MesDeviceInfo.OrientationPortrait|block": "세로 모드 회전",
  "MesDeviceInfo.Shaken|block": "흔들기",
  "MesDpadButtonInfo.ADown|block": "A down",
  "MesDpadButtonInfo.AUp|block": "A up",
  "MesDpadButtonInfo.BDown|block": "B down",
  "MesDpadButtonInfo.BUp|block": "B up",
  "MesDpadButtonInfo.CDown|block": "C down",
  "MesDpadButtonInfo.CUp|block": "C up",
  "MesDpadButtonInfo.DDown|block": "D down",
  "MesDpadButtonInfo.DUp|block": "D up",
  "MesDpadButtonInfo._1Down|block": "1 down",
  "MesDpadButtonInfo._1Up|block": "1 up",
  "MesDpadButtonInfo._2Down|block": "2 down",
  "MesDpadButtonInfo._2Up|block": "2 up",
  "MesDpadButtonInfo._3Down|block": "3 down",
  "MesDpadButtonInfo._3Up|block": "3 up",
  "MesDpadButtonInfo._4Down|block": "4 down",
  "MesDpadButtonInfo._4Up|block": "4 up",
  "MesRemoteControlEvent.forward|block": "앞으로",
  "MesRemoteControlEvent.nextTrack|block": "다음 트랙",
  "MesRemoteControlEvent.pause|block": "일시중지",
  "MesRemoteControlEvent.play|block": "재생",
  "MesRemoteControlEvent.previousTrack|block": "이전 트랙",
  "MesRemoteControlEvent.rewind|block": "되감기",
  "MesRemoteControlEvent.stop|block": "정지",
  "MesRemoteControlEvent.volumeDown|block": "볼륨 낮춤",
  "MesRemoteControlEvent.volumeUp|block": "볼륨 높임",
  "MusicEvent.BackgroundMelodyEnded|block": "백그라운드 멜로디 종료",
  "MusicEvent.BackgroundMelodyNotePlayed|block": "백그라운드 멜로디 음악 재생",
  "MusicEvent.BackgroundMelodyPaused|block": "백그라운드 멜로디 잠시 멈춤",
  "MusicEvent.BackgroundMelodyRepeated|block": "백그라운드 멜로디 반복 재생",
  "MusicEvent.BackgroundMelodyResumed|block": "백그라운드 멜로디 재개",
  "MusicEvent.BackgroundMelodyStarted|block": "백그라운드 멜로디 시작",
  "MusicEvent.MelodyEnded|block": "멜로디 종료",
  "MusicEvent.MelodyNotePlayed|block": "멜로디 재생",
  "MusicEvent.MelodyRepeated|block": "멜로디 반복 재생",
  "MusicEvent.MelodyStarted|block": "멜로디 시작",
  "Note.CSharp3|block": "C#3",
  "Note.CSharp4|block": "C#4",
  "Note.CSharp5|block": "C#5",
  "Note.CSharp|block": "C#",
  "Note.FSharp3|block": "F#3",
  "Note.FSharp4|block": "F#4",
  "Note.FSharp5|block": "F#5",
  "Note.FSharp|block": "F#",
  "Note.GSharp3|block": "G#3",
  "Note.GSharp4|block": "G#4",
  "Note.GSharp5|block": "G#5",
  "Note.GSharp|block": "G#",
  "Number.toString": "입력된 숫자 문자열을 정수 값으로 바꿔 리턴합니다.",
  "Number|block": "수",
  "Object.keys": "객체의 필드 이름을 리턴합니다.",
  "Object|block": "객체",
  "PinEvent.Fall|block": "떨어지고 있으면",
  "PinEvent.PulseHigh|block": "펄스 high",
  "PinEvent.PulseLow|block": "펄스 low",
  "PinEvent.Rise|block": "펄스 발생",
  "PinEventType.Edge|block": "엣지 커넥터",
  "PinEventType.None|block": "없음",
  "PinEventType.Pulse|block": "펄스",
  "PinEventType.Touch|block": "터치",
  "PinPullMode.PullDown|block": "down",
  "PinPullMode.PullNone|block": "없음",
  "PinPullMode.PullUp|block": "up",
  "PulseValue.High|block": "high",
  "PulseValue.Low|block": "low",
  "RadioPacketProperty.SerialNumber|block": "시리얼 번호",
  "RadioPacketProperty.SignalStrength|block": "신호 강도",
  "RadioPacketProperty.Time|block": "전송 시간",
  "Rotation.Pitch|block": "앞-뒤",
  "Rotation.Roll|block": "좌-우",
  "String": "문자열을 연결해 합치고, 문자열의 일부를 잘라내거나, 원하는 문자열을 찾아냅니다.",
  "String.charAt": "문자열에서 원하는 위치에 있는 문자 1개를 리턴합니다.",
  "String.charAt|block": "%this=text|에서 %pos 번째 위치의 1개 문자",
  "String.charAt|param|index": "첫 번째 문자의 위치를 0이라고 할 때, 원하는 문자의 위치.",
  "String.charCodeAt": "특정 위치에 있는 문자의 유니코드(Unicode) 값을 리턴합니다.",
  "String.charCodeAt|param|index": "첫 문자의 위치를 0 으로 할 때, 문자를 뽑아낼 위치. 그 위치에 문자가 없는 경우, NaN 을 리턴합니다.",
  "String.compare": "두 문자열을 (ASCII 값으로) 비교한 결과를 리턴합니다. 왼쪽 문자열이 사전순으로 더 빠른 경우 -1, 두 문자열이 같은 경우 0, 오른쪽 문자열이 사전순으로 더 빠른 경우 1을 리턴합니다.",
  "String.compare|block": "%this=text|와 %that 를 비교한 결과 값",
  "String.compare|param|that": "문자열1",
  "String.concat": "두 개 이상의 문자열을 연결해 만든 문자열을 리턴합니다.",
  "String.concat|param|other": "연결시킬 문자열.",
  "String.fromCharCode": "아스키(ASCII) 코드 값을 한 문자의 문자열로 만들어 리턴합니다.",
  "String.fromCharCode|block": "문자(ASCII): %code",
  "String.includes": "문자열 안에서 어떤 문자열이 포함되어있는지 확인합니다.",
  "String.includes|param|searchValue": "찾아낼 문자열",
  "String.includes|param|start": "문자열을 찾기 시작할 위치",
  "String.indexOf": "찾는 문자열이 나타난 첫 번째 위치를 리턴합니다.",
  "String.indexOf|param|searchValue": "찾을 문자열",
  "String.indexOf|param|start": "문자열을 찾기 시작할 위치",
  "String.isEmpty": "빈 문자열인지 확인한 값을 리턴합니다.",
  "String.length": "문자열에 포함된 문자의 개수를 리턴합니다.",
  "String.length|block": "%VALUE 의 길이",
  "String.slice": "문자열의 일부를 잘라 리턴합니다.",
  "String.slice|param|end": "잘라낼 마지막 문자의 인덱스 번호",
  "String.slice|param|start": "첫 문자 위치; 마지막 문자에서 부터 시작해서 음수 가능, 예시: 0",
  "String.split": "구분 기호를 기준으로 문자열을 잘라냅니다.",
  "String.split|param|separator": "@param 구분기호",
  "String.substr": "문자열의 일부를 잘라 리턴합니다.",
  "String.substr|block": "%this=text|에서 %start 번째 위치부터|%length 개 문자",
  "String.substr|param|length": "잘라낼 문자 개수",
  "String.substr|param|start": "잘라내기를 시작할 처음 위치; 마지막 위치를 기준으로 표현하면 음수로 표현 가능, 예시: 0",
  "String@type": "문자열을 연결해 합치고, 문자열의 일부를 잘라내거나, 원하는 문자열을 찾아냅니다.",
  "String|block": "문자열",
  "basic": "마이크로비트를 사용하는 기본 기능들이 있습니다.",
  "basic.clearScreen": "모든 LED 를 끕니다.",
  "basic.clearScreen|block": "LED 스크린 지우기",
  "basic.forever": "원하는 코드를 무한반복 실행합니다. 다른 코드들이 실행되는 것에 영향을 주지 않고 동시에 실행됩니다.",
  "basic.forever|block": "무한반복 실행",
  "basic.pause": "원하는 시간(밀리초, ms) 동안 아무 작업도 하지 않습니다.",
  "basic.pause|block": "일시중지 %pause (ms)",
  "basic.pause|param|ms": "대기 시킬 시간(ms), 예시: 100, 200, 500, 1000, 2000",
  "basic.plotLeds": "이미지를 LED 스크린에 출력합니다.",
  "basic.plotLeds|param|leds": "LED 패턴",
  "basic.showAnimation": "LED 스크린에 애니메이션을 출력합니다.",
  "basic.showAnimation|param|interval": "이미지 갱신 시간(ms)",
  "basic.showAnimation|param|leds": "LED 패턴",
  "basic.showArrow": "LED 스크린에 방향 화살표를 출력합니다.",
  "basic.showArrow|block": "화살표 출력 %i=device_arrow",
  "basic.showArrow|param|direction": "화살표 방향",
  "basic.showArrow|param|interval": "보여줄 시간(ms). 기본값은 600.",
  "basic.showIcon": "선택한 아이콘을 LED 스크린에 출력합니다.",
  "basic.showIcon|block": "아이콘 출력 %i",
  "basic.showIcon|param|icon": "아이콘 id",
  "basic.showIcon|param|interval": "보여줄 시간(ms). 기본값은 600.",
  "basic.showLeds": "이미지를 LED 스크린에 출력합니다.",
  "basic.showLeds|block": "LED 출력",
  "basic.showLeds|param|interval": "이미지 출력 후 유지시킬 시간(ms)",
  "basic.showLeds|param|leds": "LED 패턴",
  "basic.showNumber": "수를 출력합니다. (9보다 큰) 두 자리 이상의 수인 경우 스크롤되며 출력됩니다.",
  "basic.showNumber|block": "수 출력|%number",
  "basic.showNumber|param|interval": "스크롤 속도; 예시: 150, 100, 200, -100",
  "basic.showString": "텍스트 문자열을 한 번에 한 문자씩 출력합니다. 문자가 두 개 이상인 경우, 스크롤 되며 출력됩니다. (문자 1개는 스크롤 되지 않습니다.)",
  "basic.showString|block": "문자열 출력|%text",
  "basic.showString|param|interval": "문자 스크롤 속도; 예시: 150, 100, 200, -100",
  "basic.showString|param|text": "화면에 스크롤 시킬 텍스트 문자열, 예시: \"Hello!\"",
  "basic|block": "기본",
  "bluetooth": "추가적인 블루투스 서비스에 대한 지원.\n\n추가적인 블루투스 서비스에 대한 지원.",
  "bluetooth.advertiseUid": "블루투스 에디스톤(Eddystone) 프로토콜을 이용해 UID를 전송합니다.",
  "bluetooth.advertiseUidBuffer": "블루투스 에디스톤(Eddystone) 프로토콜을 이용해 UID를 전송합니다.",
  "bluetooth.advertiseUidBuffer|param|connectable": "다른 장치에서 블루투스 연결이 가능하게 하려면 true, 아니면 false.",
  "bluetooth.advertiseUidBuffer|param|nsAndInstance": "16 바이트 namespace 버퍼(bytes 0-9) 와 instance (bytes 10-15)",
  "bluetooth.advertiseUidBuffer|param|power": "파워 레벨 0 부터 7, 예시: 7",
  "bluetooth.advertiseUid|block": "블루투스 UID 전송|namespace (bytes 6-9)%ns|instance (bytes 2-6)%instance|with power %power|connectable %connectable",
  "bluetooth.advertiseUid|param|connectable": "다른 장치에서 블루투스 연결이 가능하게 하려면 true, 아니면 false.",
  "bluetooth.advertiseUid|param|instance": "인스턴스 uid 의 마지막 4 바이트",
  "bluetooth.advertiseUid|param|ns": "namespace uid 의 마지막 4 바이트",
  "bluetooth.advertiseUid|param|power": "파워 레벨 0 부터 7, 예시: 7",
  "bluetooth.advertiseUrl": "블루투스 에디스톤(Eddystone) 프로토콜을 이용해 URL 주소를 전송합니다.",
  "bluetooth.advertiseUrl|block": "블루투스 URL 전송 %url|with power %power|connectable %connectable",
  "bluetooth.advertiseUrl|param|connectable": "다른 장치에서 블루투스 연결이 가능하게 하려면 true, 아니면 false.",
  "bluetooth.advertiseUrl|param|power": "파워 레벨 0 부터 7, 예시: 7",
  "bluetooth.advertiseUrl|param|url": "전송할 URL 주소. 에디스톤(Eddystone) 프로토콜의 URL 길이 제한 보다 짧아야 함, 예시: \"https://makecode.com\"",
  "bluetooth.onBluetoothConnected": "마이크로비트가 블루투스로 연결되면, 설정한 작업을 실행합니다.",
  "bluetooth.onBluetoothConnected|block": "블루투스 연결되면 실행",
  "bluetooth.onBluetoothConnected|param|body": "블루투스로 연결되었을 때 실행할 코드",
  "bluetooth.onBluetoothDisconnected": "마이크로비트에 연결된 블루투스가 해제되면, 설정한 작업을 실행합니다.",
  "bluetooth.onBluetoothDisconnected|block": "블루투스 해제되면 실행",
  "bluetooth.onBluetoothDisconnected|param|body": "블루투스 연결이 해제되었을 때 실행할 코드",
  "bluetooth.onUartDataReceived": "구분 기호 문자를 만나면 실행할 이벤트들을 등록합니다.",
  "bluetooth.onUartDataReceived|block": "블루투스|%delimiters=serial_delimiter_conv 입력되면 실행",
  "bluetooth.onUartDataReceived|param|delimiters": "구분 기호",
  "bluetooth.setTransmitPower": "블루투스 신호 전송 강도를 0 (최소) ~ 7 (최대) 의 범위로 설정합니다.",
  "bluetooth.setTransmitPower|block": "블루투스 전송 강도를 %power 로 설정",
  "bluetooth.setTransmitPower|param|power": "출력 레벨 0 (최소) 부터 7 (최대), 예시: 7.",
  "bluetooth.startAccelerometerService": "블루투스 가속도센서 서비스를 시작합니다.",
  "bluetooth.startAccelerometerService|block": "블루투스 가속도센서 서비스 시작",
  "bluetooth.startButtonService": "블루투스 버튼 서비스를 시작합니다.",
  "bluetooth.startButtonService|block": "블루투스 버튼 서비스 시작",
  "bluetooth.startIOPinService": "블루투스 입출력 핀 서비스를 시작합니다.",
  "bluetooth.startIOPinService|block": "블루투스 입출력 핀 서비스 시작",
  "bluetooth.startLEDService": "블루투스 LED 서비스를 시작합니다.",
  "bluetooth.startLEDService|block": "블루투스 LED 서비스 시작",
  "bluetooth.startMagnetometerService": "블루투스 자기센서 서비스를 시작합니다.",
  "bluetooth.startMagnetometerService|block": "블루투스 자기센서 서비스 시작",
  "bluetooth.startTemperatureService": "블루투스 온도센서 서비스를 시작합니다.",
  "bluetooth.startTemperatureService|block": "블루투스 온도센서 서비스 시작",
  "bluetooth.startUartService": "블루투스 UART 서비스를 시작합니다.",
  "bluetooth.startUartService|block": "블루투스 UART 서비스 시작",
  "bluetooth.stopAdvertising": "블루투스 에디스톤(Eddystone) endpoint 송신을 중단시킵니다.",
  "bluetooth.stopAdvertising|block": "블루투스 전송 중단",
  "bluetooth.uartReadBuffer": "버퍼링된 UART 데이터를 버퍼에 저장합니다.",
  "bluetooth.uartReadUntil": "블루투스 UART 서비스 버퍼를 읽어, 특정 구분 문자를 만나면 그 내용을 리턴합니다.",
  "bluetooth.uartReadUntil|block": "블루투스 UART 수신 값:|%del=serial_delimiter_conv 전까지",
  "bluetooth.uartWriteBuffer": "버퍼에 저장된 데이터를 블루투스 UART를 통해 전송합니다.",
  "bluetooth.uartWriteLine": "블루투스 UART 서비스 버퍼로 출력합니다. 블루투스로 연결된 장치에 데이터를 전송합니다.",
  "bluetooth.uartWriteLine|block": "블루투스 UART 전송:한 줄|%data",
  "bluetooth.uartWriteNumber": "시리얼통신으로 수를 전송합니다.",
  "bluetooth.uartWriteNumber|block": "블루투스 UART 전송:수|%value",
  "bluetooth.uartWriteString": "블루투스 UART 서비스 버퍼로 출력합니다. 블루투스로 연결된 장치에 데이터를 전송합니다.",
  "bluetooth.uartWriteString|block": "블루투스 UART 전송:문자열|%data",
  "bluetooth.uartWriteValue": "시리얼통신으로 ``이름: 값`` 을 쌍으로 한 줄 전송합니다.",
  "bluetooth.uartWriteValue|block": "블루투스 UART 전송:변수값|%name|= %value",
  "bluetooth.uartWriteValue|param|name": "변수값 이름, 예시: x",
  "bluetooth.uartWriteValue|param|value": "값",
  "bluetooth|block": "블루투스",
  "console": "명령어 입출력 콘솔로 데이터 입력하고 출력하기",
  "console.addListener": "메시지 로그를 위한 리스너를 추가합니다.",
  "console.log": "명령어 입출력 콘솔에 한 줄 문자열을 출력합니다.",
  "console.logValue": "변수와 값을 출력합니다.: 명령어 입출력 콘솔에 한 줄로 출력시킬 수 있는 형태의 변수명과 값 쌍",
  "console.logValue|param|name": "변수명과 값 쌍의 변수명, 예시: \"x\"",
  "console.logValue|param|value": "출력할 값",
  "console|block": "명령어창",
  "control": "런타임 유틸리티와 이벤트 유틸리티.",
  "control.assert": "조건식이나 값의 평가값이 거짓(false)인 경우, 시리얼통신 명령어 입출력 콘솔로 098 코드를 출력합니다.",
  "control.createBuffer": "0 값으로 초기화시킨 새 버퍼를 만듭니다.",
  "control.createBufferFromUTF8": "UTF8 포맷의 문자열로 새로운 버퍼를 생성합니다.",
  "control.createBufferFromUTF8|param|str": "버퍼에 기록할 문자열",
  "control.createBuffer|param|size": "버퍼의 크기(바이트 수)",
  "control.deviceName": "시리얼번호에 따라 사용하기 편리한 장치 이름을 만듭니다.",
  "control.deviceName|block": "장치 이름",
  "control.deviceSerialNumber": "장치 내부에 저장되어있는 고유 시리얼번호를 읽어옵니다.",
  "control.deviceSerialNumber|block": "장치 시리얼 번호",
  "control.eventSourceId": "C + + 런타임 상수 값을 리턴합니다.",
  "control.eventSourceId|block": "%id",
  "control.eventTimestamp": "마지막으로 실행되었던 이벤트의 타임스탬프 값을 가져옵니다.",
  "control.eventTimestamp|block": "이벤트 타임스탬프",
  "control.eventValue": "마지막으로 실행되었던 이벤트 값을 가져옵니다.",
  "control.eventValueId": "C + + 런타임 상수 값을 리턴합니다.",
  "control.eventValueId|block": "%id",
  "control.eventValue|block": "이벤트 값",
  "control.inBackground": "백그라운드로 실행시킬 코드를 등록합니다.",
  "control.inBackground|block": "백그라운드로 실행",
  "control.onEvent": "이벤트 처리기를 등록합니다.",
  "control.onEvent|block": "이벤트|장치 %src=control_event_source_id|값 %value=control_event_value_id 감지하면 실행",
  "control.panic": "오류 코드를 출력하고 프로그램 실행을 중단합니다.",
  "control.raiseEvent": "이벤트 신호를 발생시킵니다.",
  "control.raiseEvent|block": "이벤트 생성|장치 %src=control_event_source_id|값 %value=control_event_value_id",
  "control.raiseEvent|param|mode": "이벤트 생성 후 처리되어야하는 있는 추가적인 정의. (기본값은 CREATE_AND_FIRE)",
  "control.raiseEvent|param|src": "마이크로비트 이벤트 ID. 예시: MICROBIT_ID_BUTTON_A",
  "control.raiseEvent|param|value": "이벤트 발생의 원인을 나타내는 특정 컴포넌트 코드.",
  "control.reset": "BBC 마이크로비트를 재시작 시킵니다.",
  "control.reset|block": "재시작",
  "control.runtimeWarning": "시뮬레이터에서 경고를 표시합니다.",
  "control.waitMicros": "현재 상태를 원하는 시간(μs) 동안 그대로 유지시킵니다.",
  "control.waitMicros|block": "일시중지 %micros (µs)",
  "control.waitMicros|param|micros": "유지시킬 시간(μs). 예시: 4",
  "control|block": "고급제어",
  "convertToText": "값을 문자열로 변환",
  "convertToText|block": "$value=math_number 를 문자열로 변환한 값",
  "convertToText|param|value": "문자열로 변환할 값",
  "devices": "마이크로비트의 블루투스 기능을 이용해 스마트폰을 제어합니다.",
  "devices.onGamepadButton": "페어링된 게임패드에서 명령이 전송되면, 설정한 작업을 실행합니다.",
  "devices.onGamepadButton|block": "|%NAME 감지하면 실행",
  "devices.onGamepadButton|param|body": "버튼이 눌렸을 때 실행시킬 코드",
  "devices.onGamepadButton|param|name": "버튼 이름",
  "devices.onNotified": "이벤트가 발생하면, 설정한 작업을 실행합니다.",
  "devices.onNotified|block": "|%event 감지하면 실행",
  "devices.onNotified|param|body": "이벤트가 발생했을 때 처리할 코드 핸들러",
  "devices.onNotified|param|event": "이벤트 설명",
  "devices.onSignalStrengthChanged": "연결 신호 강도가 변화하면, 설정한 작업을 실행합니다.",
  "devices.onSignalStrengthChanged|block": "연결 신호 강도가 변하면 실행",
  "devices.onSignalStrengthChanged|param|body": "연결 신호 강도가 변화했을 때 실행할 코드",
  "devices.raiseAlertTo": "연결시킨 장치에 ``alert`` 명령을 전송합니다.",
  "devices.raiseAlertTo|block": "경고|%property 명령 전송",
  "devices.raiseAlertTo|param|event": "이벤트 설명",
  "devices.signalStrength": "페어링된 장치에서 받은 마지막 신호의 세기를 읽어옵니다.",
  "devices.signalStrength|block": "연결 신호 강도",
  "devices.tellCameraTo": "연결시킨 장치에 ``camera`` 명령을 전송합니다.",
  "devices.tellCameraTo|block": "카메라|%property 명령 전송",
  "devices.tellCameraTo|param|event": "이벤트 설명",
  "devices.tellRemoteControlTo": "연결시킨 장치에 ``remote control`` 명령을 전송합니다.",
  "devices.tellRemoteControlTo|block": "리모트|%property 명령 전송",
  "devices.tellRemoteControlTo|param|event": "이벤트 설명",
  "devices|block": "장치제어",
  "game": "LED 1개를 움직이는 게임을 만드는 엔진",
  "game.LedSprite": "1개의 LED 가 움직이는 것과 같은 게임 스프라이트처럼 렌더링됩니다.",
  "game.LedSprite.blink": "현재 게임 스프라이트의 ``반짝임`` 주기(시간)를 읽어옵니다.",
  "game.LedSprite.brightness": "현재 게임 스프라이트의 ``밝기`` 를 읽어옵니다.",
  "game.LedSprite.change": "게임 스프라이트의 속성을 변경합니다.",
  "game.LedSprite.changeBlinkBy": "``반짝임`` 주기(ms)를 변경합니다.",
  "game.LedSprite.changeBlinkBy|param|ms": "TODO",
  "game.LedSprite.changeBrightnessBy": "게임 스프라이트의 ``y`` 좌표 값을 변경합니다.",
  "game.LedSprite.changeBrightnessBy|param|value": "변경할 밝기 값",
  "game.LedSprite.changeDirectionBy": "게임 스프라이트의 이동방향을 오른쪽 시계방향으로 원하는 ``각도`` 만큼 변경시킵니다.",
  "game.LedSprite.changeDirectionBy|param|angle": "TODO",
  "game.LedSprite.changeXBy": "게임 스프라이트의 ``x`` 좌표 값을 변경합니다.",
  "game.LedSprite.changeXBy|param|x": "TODO",
  "game.LedSprite.changeYBy": "게임 스프라이트의 ``y`` 좌표 값을 변경합니다.",
  "game.LedSprite.changeYBy|param|y": "TODO",
  "game.LedSprite.change|block": "%sprite|의 %property|를 %value 만큼 변경",
  "game.LedSprite.change|param|property": "스프라이트 속성",
  "game.LedSprite.change|param|value": "증감값, 예시: 1",
  "game.LedSprite.delete": "게임 엔진에서 움직이고 있는 스프라이트를 삭제합니다. 움직이는 게임 스프라이트는 화면에 더 이상 나타나지 않고 다른 스프라이트들과 서로 상호작용하지 않게 됩니다.",
  "game.LedSprite.delete|block": "%this(sprite) 삭제",
  "game.LedSprite.direction": "현재 게임 스프라이트의 이동 방향을 알아냅니다.",
  "game.LedSprite.get": "게임 스프라이트의 속성을 읽어옵니다.",
  "game.LedSprite.get|block": "%sprite|의 %property",
  "game.LedSprite.get|param|property": "스프라이트 속성",
  "game.LedSprite.goTo": "스크린의 원하는 위치로 이동시킵니다.",
  "game.LedSprite.goTo|param|x": "TODO",
  "game.LedSprite.goTo|param|y": "TODO",
  "game.LedSprite.ifOnEdgeBounce": "LED 스크린 화면의 가장자리 경계(벽)에 닿았을 때, 스프라이트의 이동 방향이 반대로 바뀌도록 설정합니다.",
  "game.LedSprite.ifOnEdgeBounce|block": "%sprite|가 벽에서 튕기도록 설정",
  "game.LedSprite.isTouching": "게임 스프라이트가 다른 스프라이트와 같은 위치에 있으면 참(true) 값을 리턴합니다.",
  "game.LedSprite.isTouchingEdge": "게임 스프라이트가 가장자리 경계(벽)에 닿았으면 참(true) 값을 리턴합니다.",
  "game.LedSprite.isTouchingEdge|block": "%sprite|가 벽에 닿았나?",
  "game.LedSprite.isTouching|block": "%sprite|가 %other|에 닿았나?",
  "game.LedSprite.isTouching|param|other": "겹침이나 충돌을 감지할 스프라이트",
  "game.LedSprite.move": "현재 바라보고 있는 이동 방향으로 원하는 픽셀 거리만큼 이동시킵니다.",
  "game.LedSprite.move|block": "%sprite|를 %leds 만큼 이동",
  "game.LedSprite.move|param|leds": "이동 시킬 거리, 예시: 1, -1",
  "game.LedSprite.off": "(기본값으로) 스프라이트가 꺼져있도록 설정합니다.",
  "game.LedSprite.on": "(기본값으로) 스프라이트가 켜져있도록 설정합니다.",
  "game.LedSprite.set": "게임 스프라이트의 속성을 설정합니다.",
  "game.LedSprite.setBlink": "스프라이트가 깜박이는 시간(ms)을 설정합니다.",
  "game.LedSprite.setBlink|param|ms": "TODO",
  "game.LedSprite.setBrightness": "게임 스프라이트의 ``밝기`` 를 설정합니다.",
  "game.LedSprite.setBrightness|param|brightness": "밝기 값: 0(끔) ~ 255(켬), 예시: 255.",
  "game.LedSprite.setDirection": "현재 스프라이트의 이동방향을 설정합니다. 45의 배수 단위로 반올림 됩니다.",
  "game.LedSprite.setDirection|param|degrees": "새로운 방향 각도",
  "game.LedSprite.setX": "게임 스프라이트의 ``x`` 좌표를 설정합니다.",
  "game.LedSprite.setX|param|x": "TODO",
  "game.LedSprite.setY": "게임 스프라이트의 ``y`` 좌표를 설정합니다.",
  "game.LedSprite.setY|param|y": "TODO",
  "game.LedSprite.set|block": "%sprite|의 %property|를 %value 로 설정",
  "game.LedSprite.set|param|property": "스프라이트 속성",
  "game.LedSprite.turn": "게임 스프라이트의 이동방향을 회전시킵니다.",
  "game.LedSprite.turnLeft": "게임 스프라이트의 이동방향을 왼쪽(반시계 방향)으로 회전시킵니다.",
  "game.LedSprite.turnLeft|param|degrees": "TODO",
  "game.LedSprite.turnRight": "게임 스프라이트의 이동방향을 오른쪽(시계 방향)으로 회전시킵니다.",
  "game.LedSprite.turnRight|param|degrees": "TODO",
  "game.LedSprite.turn|block": "%sprite|의 이동방향을 %direction|방향으로 %degrees (°) 회전",
  "game.LedSprite.turn|param|degrees": "회전 각도, 예시: 45, 90, 180, 135",
  "game.LedSprite.turn|param|direction": "왼쪽, 오른쪽",
  "game.LedSprite.x": "게임 스프라이트의 ``x`` 좌표를 읽어옵니다.",
  "game.LedSprite.y": "게임 스프라이트의 ``y`` 좌표를 읽어옵니다.",
  "game.addLife": "라이프를 추가합니다.",
  "game.addLife|block": "라이프를 %lives 만큼 추가",
  "game.addLife|param|lives": "라이프 개수",
  "game.addScore": "점수를 추가하고 애니메이션을 출력합니다.",
  "game.addScore|block": "점수를|%points 만큼 변경",
  "game.addScore|param|points": "추가 점수, 예시: 1",
  "game.createSprite": "이동방향이 오른쪽인 새로운 LED 스프라이트를 생성합니다.",
  "game.createSprite|block": "스프라이트|x좌표 %x|y좌표 %y",
  "game.createSprite|param|x": "수평(좌우)방향 좌표, 예시: 2",
  "game.createSprite|param|y": "수직(위아래)방향 좌표, 예시: 2",
  "game.currentTime": "(`카운트다운 시작` 후) 남은 시간이나, (전원이 켜진 후 또는`스톱워치 시작` 후) 흐른 시간(ms)을 알아냅니다.",
  "game.gameOver": "게임 종료 애니메이션과 점수를 출력합니다.",
  "game.gameOver|block": "게임 종료",
  "game.invalidSprite": "잘못된 스프라이트를 가져옵니다.; 초기화에 사용된 스프라이트.",
  "game.isGameOver": "게임이 종료 되었는지 알아냅니다.",
  "game.isGameOver|block": "종료되었나?",
  "game.isPaused": "게임이 일시중지 되었는지 알아냅니다.",
  "game.isPaused|block": "일시중지되었나?",
  "game.isRunning": "게임이 실행 중인지 알아냅니다. 게임이 종료된 경우 '거짓(false)' 값을 리턴합니다.",
  "game.isRunning|block": "실행중인가?",
  "game.level": "현재 레벨을 읽어옵니다.",
  "game.levelUp": "레벨을 올리고 메시지를 출력합니다.",
  "game.life": "현재 라이프 개수를 읽어옵니다.",
  "game.pause": "게임을 일시중지시켜 다른 애니메이션 출력이 가능하도록 합니다.",
  "game.pause|block": "게임 일시중지",
  "game.removeLife": "라이프를 감소시킵니다.",
  "game.removeLife|block": "라이프를 %life 만큼 감소",
  "game.removeLife|param|life": "감소시킬 라이프 개수",
  "game.resume": "게임 렌더링 엔진을 다시 작동 시킵니다.",
  "game.resume|block": "게임 재개",
  "game.score": "현재 점수를 읽어옵니다.",
  "game.score|block": "현재 점수",
  "game.setLife": "라이프를 설정합니다.",
  "game.setLife|block": "라이프를 %value 으로 설정",
  "game.setLife|param|value": "현재 라이프 개수",
  "game.setScore": "점수를 설정 합니다.",
  "game.setScore|block": "점수를|%points 으로 설정",
  "game.setScore|param|value": "새 점수",
  "game.showScore": "점수를 스크린에 출력합니다.",
  "game.startCountdown": "애니메이션을 출력한 후, 게임 카운트 다운 타이머가 시작됩니다. 타이머가 0이 되면 게임이 종료됩니다.",
  "game.startCountdown|block": "|%duration (ms) 카운트다운 시작",
  "game.startCountdown|param|ms": "카운트다운 시간(ms), 예시:10000",
  "game.startStopwatch": "스톱 워치 타이머를 돌리기 시작합니다. '현재 시간' 은 흘러간 시간을 리턴할 것입니다.",
  "game|block": "게임",
  "hex": "16진수 변환기",
  "images": "LED 스크린으로 출력시킬 수 있는 이미지를 만들고, 수정하고, 출력합니다.",
  "images.arrowImage|block": "화살표 이미지 %i=device_arrow",
  "images.arrowNumber|block": "%arrow",
  "images.createBigImage": "폭이 2배인 LED 이미지를 만듭니다.",
  "images.createBigImage|block": "큰 이미지",
  "images.createImage": "LED 스크린 크기의 이미지를 만듭니다.",
  "images.createImage|block": "이미지",
  "images.iconImage|block": "아이콘 이미지 %i",
  "images|block": "이미지",
  "input": "센서들로부터 전송된 이벤트와 데이터",
  "input.acceleration": "가속도센서로 읽어들인 가속도 값을 밀리지(mg) 단위로 읽어옵니다.(스크린을 하늘 방향으로 바닥에 놓은 상태에서는x=0, y=0, z=-1024 가 됩니다.)",
  "input.acceleration|block": "가속도센서|%NAME|값(mg)",
  "input.acceleration|param|dimension": "x, y, z 축 방향, 예시: Dimension.X",
  "input.buttonIsPressed": "``A``, ``B`` 버튼의 상태를 읽어옵니다.(눌림, 놓임)",
  "input.buttonIsPressed|block": "|%NAME|눌림 상태",
  "input.buttonIsPressed|param|button": "상태를 검사할 버튼, 예시: 버튼 A",
  "input.calibrate": "구버전입니다. 자기센서 보정 기능을 사용하세요.",
  "input.calibrateCompass": "구버전입니다. 자기센서 보정은 자동으로 이루어집니다.",
  "input.calibrateCompass|block": "자기센서 보정 실행",
  "input.compassHeading": "자기센서로 읽어들인, 북쪽 방향의 각도를 읽어옵니다.(나침반의 붉은 바늘이 가리키는 자기 북극 방향)",
  "input.compassHeading|block": "자기센서 값(°)",
  "input.isGesture": "현재 움직임이 감지되었는지 검사합니다.",
  "input.isGesture|block": "는 %gesture 입니다.",
  "input.isGesture|param|gesture": "감지할 움직임, 예시: Gesture.Shake",
  "input.lightLevel": "빛센서로 읽어들인 빛의 밝기를 0(어두움) ~ 255(가장 밝음) 범위로 변환해 읽어옵니다. LED 스크린을 빛센서 입력처럼 사용합니다.",
  "input.lightLevel|block": "빛센서 값",
  "input.magneticForce": "자기센서로 감지한 자기력 값을 `마이크로-테슬라` (`µT`) 단위로 읽어옵니다. 시뮬레이터에서는 이 기능을 시험해 볼 수 없습니다.",
  "input.magneticForce|block": "자기센서|%NAME|값(µT)",
  "input.magneticForce|param|dimension": "x, y, z 축 방향, 예시: Dimension.X",
  "input.onButtonPressed": "버튼(A, B, A+B)을 눌렀다 놓았을 때, 작업을 실행시킵니다.",
  "input.onButtonPressed|block": "|%NAME|누르면 실행",
  "input.onButtonPressed|param|body": "이벤트가 발생했을 때 실행시킬 코드",
  "input.onButtonPressed|param|button": "눌림을 확인할 버튼",
  "input.onGesture": "(마이크로비트를 흔드는 것과 같은) 움직임을 감지했을 때, 작업을 실행시킵니다.",
  "input.onGesture|block": "|%NAME|감지하면 실행",
  "input.onGesture|param|body": "움직임을 감지했을 때 실행시킬 코드",
  "input.onGesture|param|gesture": "감지할 움직임, 예시: 흔들기",
  "input.onLogoDown": "로고가 땅 방향인 경우, 작업을 실행시킵니다.",
  "input.onLogoUp": "로고가 하늘 방향인 경우, 작업을 실행시킵니다.",
  "input.onPinPressed": "핀이 연결(on)되면, 작업을 실행시킵니다. (GND 핀과 연결되어도 실행됩니다.)",
  "input.onPinPressed|block": "|%name|연결(on)되면 실행",
  "input.onPinPressed|param|body": "핀이 연결(on)되면 실행시킬 코드",
  "input.onPinPressed|param|name": "연결(on)을 확인할 핀, 예시: 터치핀 P0",
  "input.onPinReleased": "핀이 끊어(off)지면, 작업을 실행시킵니다.",
  "input.onPinReleased|block": "|%NAME|끊어(off)지면 실행",
  "input.onPinReleased|param|body": "핀이 끊어(off)지면 실행시킬 코드",
  "input.onPinReleased|param|name": "끊어짐(off) 확인할 핀, 예시: 터치핀 P0",
  "input.onScreenDown": "스크린이 땅 방향인 경우, 작업을 실행시킵니다.",
  "input.onScreenUp": "스크린이 하늘 방향인 경우, 작업을 실행시킵니다.",
  "input.onShake": "흔들림을 감지한 경우, 작업을 실행시킵니다.",
  "input.pinIsPressed": "핀의 상태(연결됨, 끊김)를 감지합니다. 접지(GND)와 연결시키면 전류가 흘러 연결됩니다.",
  "input.pinIsPressed|block": "%NAME|연결(on) 상태",
  "input.pinIsPressed|param|name": "연결을 확인할 핀, 예시: 터치핀 P0",
  "input.rotation": "``x-축`` 을 중심으로 앞-뒤(pitch) 로 기울어진 각도나  ``y-축`` 을 중심으로 좌-우(roll)로 기울어진 각도를 읽어옵니다.",
  "input.rotation|block": "기울기센서|%NAME|값(°)",
  "input.rotation|param|kind": "위-아래 또는 좌-우",
  "input.runningTime": "전원이 켜진 후 흐른 시간을 밀리초(ms) 단위로 읽어옵니다.",
  "input.runningTimeMicros": "전원이 켜진 후 흐른 시간을 마이크로초(µs) 단위로 읽어옵니다.",
  "input.runningTimeMicros|block": "작동시간(µs)",
  "input.runningTime|block": "작동시간(ms)",
  "input.setAccelerometerRange": "가속도센서의 감지 기준값을 원하는 중력가속도(g) 로 설정합니다.",
  "input.setAccelerometerRange|block": "가속도센서|%range 감지하도록 설정",
  "input.setAccelerometerRange|param|range": "감지할 중력가속도 값",
  "input.temperature": "온도를 섭씨(°C) 단위로 읽어옵니다.",
  "input.temperature|block": "온도센서 값(°C)",
  "input|block": "입력",
  "led": "LED 스크린 제어.",
  "led.brightness": "LED 스크린의 밝기 설정값을 읽어옵니다. 0(끔) ~ 255(가장 밝음).",
  "led.brightness|block": "LED 스크린 밝기",
  "led.displayMode": "LED 스크린의 출력 설정값을 읽어옵니다.",
  "led.enable": "LED 스크린을 켜거나 끕니다.",
  "led.enable|block": "LED 스크린 사용을 %on 으로 설정",
  "led.fadeIn": "LED 스크린을 천천히 밝아지게 합니다.",
  "led.fadeIn|param|ms": "페이드 시간(밀리초)",
  "led.fadeOut": "LED 스크린을 천천히 어두워지게 합니다.",
  "led.fadeOut|param|ms": "페이드 시간(밀리초)",
  "led.plot": "원하는 x, y 좌표에 있는 LED를 켭니다. (x좌표는 왼쪽에서 오른쪽 방향으로의 좌표이고, y좌표는 위에서 아래 방향으로의 좌표입니다.) (0,0) 은 가장 윗쪽의 가장 왼쪽에 있는 위치를 의미합니다.",
  "led.plotAll": "LED 스크린의 모든 LED를 켭니다.",
  "led.plotBarGraph": "`표현할 값`과 `모두 켜졌을 때의 값`의 비율로 그려지는 LED 막대 차트를 출력합니다.\n`모두 켜졌을 때의 값`을 0으로 두면 자동으로 값이 조정됩니다.",
  "led.plotBarGraph|block": "LED 차트: 표현할 값 %value 모두 켜졌을 때의 값 %high",
  "led.plotBarGraph|param|high": "모두 켜졌을 때의 값. 0이면 자동으로 조정됩니다. 예시: 0",
  "led.plotBarGraph|param|value": "LED 차트로 표현할 값",
  "led.plotBrightness": "원하는 x, y 좌표에 있는 LED를 원하는 밝기로 켭니다. (x좌표는 왼쪽에서 오른쪽 방향으로의 좌표이고, y좌표는 위에서 아래 방향으로의 좌표입니다.) (0,0) 은 가장 윗쪽의 가장 왼쪽에 있는 위치를 의미합니다.",
  "led.plotBrightness|block": "LED 켜기|x %x|y %y |밝기 %brightness",
  "led.plotBrightness|param|brightness": "0(끔) ~ 255(가장 밝음) 범위의 밝기 값, 예시:255",
  "led.plotBrightness|param|x": "0 부터 시작하는 왼쪽에서 오른쪽 방향으로의 좌표",
  "led.plotBrightness|param|y": "0 부터 시작하는 위에서 아래 방향으로의 좌표",
  "led.plot|block": "LED 켜기|x %x|y %y",
  "led.plot|param|x": "0 부터 시작하는 왼쪽에서 오른쪽 방향으로의 좌표",
  "led.plot|param|y": "0 부터 시작하는 위에서 아래 방향으로의 좌표",
  "led.point": "x, y 좌표를 이용해 원하는 위치에 있는 LED의 밝기를 읽어옵니다. (0,0) 은 가장 윗쪽의 가장 왼쪽에 있는 위치를 의미합니다.",
  "led.point|block": "LED 상태|x %x|y %y",
  "led.point|param|x": "왼쪽에서 오른쪽 방향으로의 LED 좌표",
  "led.point|param|y": "위에서 아랫쪽 방향으로의 LED 좌표",
  "led.screenshot": "현재 LED 스크린에 나타난 패턴을 이미지로 캡쳐해 리턴합니다.",
  "led.setBrightness": "LED 스크린의 밝기를 0(어두움) ~ 255(가장 밝음) 범위의 정수 값을 이용해 설정합니다.",
  "led.setBrightness|block": "LED 스크린 밝기를 %value 로 설정",
  "led.setBrightness|param|value": "0(끔) ~ 255(가장 밝음) 범위의 밝기 값, 예시:255",
  "led.setDisplayMode": "LED 스크린의 출력 모드를 흑백 또는 그레이스케일로 설정합니다.",
  "led.setDisplayMode|block": "LED 스크린 출력을 $mode 으로 설정",
  "led.setDisplayMode|param|mode": "LED 스크린 출력 모드",
  "led.stopAnimation": "현재 출력되고 있는 애니메이션을 중단시키고 남아있는 애니메이션도 모두 삭제합니다.",
  "led.stopAnimation|block": "LED 스크린 애니메이션 중단 및 삭제",
  "led.toggle": "원하는 LED 픽셀의 출력 상태를 반대로 바꿉니다. (on->off, off->on)",
  "led.toggleAll": "모든 LED 픽셀의 출력 상태를 반대로 바꿉니다. (on->off, off->on)",
  "led.toggle|block": "LED 반전|x %x|y %y",
  "led.toggle|param|x": "픽셀 열 번호",
  "led.toggle|param|y": "픽셀 행 번호",
  "led.unplot": "원하는 x, y 좌표에 있는 LED를 끕니다. (x좌표는 왼쪽에서 오른쪽 방향으로의 좌표이고, y좌표는 위에서 아래 방향으로의 좌표입니다.) (0,0) 은 가장 윗쪽의 가장 왼쪽에 있는 위치를 의미합니다.",
  "led.unplot|block": "LED 끄기|x %x|y %y",
  "led.unplot|param|x": "왼쪽에서 오른쪽 방향으로의 LED 좌표",
  "led.unplot|param|y": "위에서 아랫쪽 방향으로의 LED 좌표",
  "led|block": "LED",
  "msgpack.packNumberArray": "수들이 저장되어있는 배열의 값을 버퍼에 기록해 넣습니다.",
  "msgpack.packNumberArray|param|nums": "수들이 저장되어있는 배열",
  "msgpack.unpackNumberArray": "버퍼에 기록되어있는 값들을 수 배열로 저장합니다.",
  "msgpack|block": "메시지팩",
  "music": "음을 출력해 음악을 만듭니다.",
  "music.beat": "음을 연주할 박자",
  "music.beat|block": "%fraction|박자",
  "music.beginMelody": "내장되어있는 멜로디를 출력합니다.\n멜로디는 음계와 박자를 의미하는 NOTE[octave][:duration] 형식의 문자열로 저장되어있습니다.",
  "music.beginMelody|block": "%melody=device_builtin_melody|%options|출력",
  "music.beginMelody|param|melodyArray": "멜로디 배열",
  "music.beginMelody|param|options": "옵션, 한 번 출력 / 무한 출력, 일반 출력 / 백그라운드로 출력",
  "music.builtInMelody": "내장되어있는 멜로디 배열을 읽어옵니다.",
  "music.builtInMelody|block": "%melody",
  "music.changeTempoBy": "원하는 빠르기(분당 박자 개수)로 바꿉니다.",
  "music.changeTempoBy|block": "빠르기(분당 박자 개수)를|%value 만큼 변경",
  "music.changeTempoBy|param|bpm": "변경시킬 빠르기(분당 박자 개수) 값, 예시: 20",
  "music.noteFrequency": "음의 진동수",
  "music.noteFrequency|block": "%name",
  "music.noteFrequency|param|name": "음 이름",
  "music.onEvent": "멜로디 이벤트가 발생했을 때 실행시킬 코드를 등록합니다.",
  "music.onEvent|block": "%value 감지하면 실행",
  "music.playTone": "`P0` 핀을 통해 원하는 음과 박자로 출력합니다.",
  "music.playTone|block": "|%note=device_note|%duration=device_beat|출력",
  "music.playTone|param|frequency": "음의 진동수(Hz), 예시: 도",
  "music.playTone|param|ms": "지속 시간(ms)",
  "music.rest": "`P0`핀을 통해 (출력 음을 바꾸지 않고) 원하는 박자만큼 유지합니다.",
  "music.rest|block": "|%duration=device_beat|(ms) 유지",
  "music.rest|param|ms": "지속 시간(ms)을 의미하는 박자",
  "music.ringTone": "`P0` 핀을 통해 원하는 음을 출력합니다.",
  "music.ringTone|block": "|%note=device_note|(Hz) 출력",
  "music.ringTone|param|frequency": "음의 진동수(Hz), 예시: 도",
  "music.setPlayTone": "멜로디 재생에 사용할 음 출력 사용자 정의 함수를 설정합니다.",
  "music.setTempo": "빠르기(분당 박자 개수)를 설정합니다.",
  "music.setTempo|block": "빠르기(분당 박자 개수)를|%value 으로 설정",
  "music.setTempo|param|bpm": "설정할 빠르기(분당 박자 개수), 예시: 120",
  "music.stopMelody": "멜로디 재생 중지",
  "music.stopMelody|block": "$options 중지",
  "music.stopMelody|param|options": "중지시킬 멜로디",
  "music.tempo": "현재 빠르기 값을 읽어옵니다. 음이 재생되는 속도는 1분 동안에 출력되는 박자(beat)의 개수(beat per minute)를 의미합니다. 빠르기 값이 크면 클 수록 음악이 더 빨리 재생됩니다.",
  "music.tempo|block": "현재 빠르기(분당 박자 개수)",
  "music|block": "소리",
  "parseFloat": "수 문자열을 수로 변환한 값을 리턴합니다.",
  "parseFloat|block": "%text 을 수로 변환한 값",
  "parseInt": "정수 문자열을 정수로 변환한 값을 리턴합니다.",
  "parseInt|block": "%text 을 정수로 변환한 값",
  "pins": "디지털/아날로그 신호, 서보 모터, I2C ... 등에 사용되는 핀에 흐르는 전류를 제어합니다.",
  "pins.P0": "P0",
  "pins.P1": "P1",
  "pins.P10": "P10",
  "pins.P11": "P3",
  "pins.P12": "P12",
  "pins.P13": "P13",
  "pins.P14": "P14",
  "pins.P15": "P15",
  "pins.P16": "P16",
  "pins.P19": "P19",
  "pins.P2": "P2",
  "pins.P20": "P19",
  "pins.P3": "P3",
  "pins.P4": "P4",
  "pins.P5": "P5",
  "pins.P6": "P6",
  "pins.P7": "P7",
  "pins.P8": "P8",
  "pins.P9": "P9",
  "pins.analogPitch": "현재 설정되어있는 PWM 출력 핀을 통해, 원하는 진동수(Hz)와 시간(ms)으로 PWM(Pulse-width modulation) 신호를 출력합니다. PWM 출력 핀을 설정하기 위해서는 `핀 아날로그 출력으로 설정` 을 사용하면 됩니다.",
  "pins.analogPitch|block": "%frequency|(Hz) 로 %ms (ms) 동안 PWM 출력",
  "pins.analogPitch|param|frequency": "출력할 PWM 진동수(Hz).",
  "pins.analogPitch|param|ms": "출력할 시간(ms).",
  "pins.analogReadPin": "핀을 통해 입력되는 전압값을 0 부터 1023 범위의 아날로그 값으로 읽어들입니다.",
  "pins.analogReadPin|block": "|%name 의 아날로그 입력 값",
  "pins.analogReadPin|param|name": "핀 이름, 예시: (아날로그 출력으로 설정된) P0",
  "pins.analogSetPeriod": "원하는 **밀리초(ms)** 로 아날로그 PWM(Pulse-width modulation) 출력을 설정합니다.\n출력 핀이 (`핀을 아날로그 출력을 설정` 을 사용해) 아날로그 출력으로 설정되어있지 않은 경우에는 아무런 영향을 주지 않습니다.",
  "pins.analogSetPeriod|block": "|%pin|의 아날로그 PWM 출력 주기를 %micros (µs) 로 설정",
  "pins.analogSetPeriod|param|micros": "PWM 출력 주기(μs). 예시:20000",
  "pins.analogSetPeriod|param|name": "핀 이름, 예시: (아날로그 출력으로 설정된) P0",
  "pins.analogSetPitchPin": "`아날로그 출력` 또는 음악 재생에 사용할 핀을 설정합니다.",
  "pins.analogSetPitchPin|block": "%name 을 아날로그 출력으로 설정",
  "pins.analogSetPitchPin|param|name": "(아날로그 출력으로 설정할) 핀 이름",
  "pins.analogWritePin": "핀을 통해 출력되는 전압값을 0 부터 1023 범위의 아날로그 값으로 출력합니다.",
  "pins.analogWritePin|block": "|%name|에 아날로그 값 %value 출력",
  "pins.analogWritePin|param|name": "핀 이름, 예시: (아날로그 출력으로 설정된) P0",
  "pins.analogWritePin|param|value": "핀으로 출력할 ``0`` 부터 ``1023`` 범위의 값. 예시:1023,0",
  "pins.createBuffer": "0 으로 초기화한 새 배열을 만듭니다.",
  "pins.createBufferFromArray": "입력된 배열의 값들로 채운 새 버퍼를 만듭니다.",
  "pins.createBufferFromArray|param|bytes": "배열값이 저장된 버퍼의 크기(bytes)",
  "pins.createBuffer|param|size": "버퍼의 크기(bytes)",
  "pins.digitalReadPin": "핀을 통해 입력되는 전압값을 0 또는 1 의 디지털 값으로 읽어들입니다.",
  "pins.digitalReadPin|block": "|%name 의 디지털 입력 값",
  "pins.digitalReadPin|param|name": "입력 핀 이름, 예시: (디지털 입력으로 설정된) P0",
  "pins.digitalWritePin": "핀을 통해 출력되는 전압값을 0 또는 1 의 디지털 값으로 출력합니다.",
  "pins.digitalWritePin|block": "|%name|에 디지털 값 %value 출력",
  "pins.digitalWritePin|param|name": "출력 핀 이름, 예시: (디지털 출력으로 설정된) P0",
  "pins.digitalWritePin|param|value": "핀으로 출력 할 값, 예시, 0 또는 1",
  "pins.i2cReadBuffer": "7-bit I2C `address` 에서 `size` 크기 만큼의 바이트를 읽어들입니다.",
  "pins.i2cReadNumber": "7-bit I2C 주소에서 수를 읽어들입니다.",
  "pins.i2cReadNumber|block": "I2C통신으로 입력된 값|address %address|format %format=i2c_sizeof|repeated %repeat",
  "pins.i2cWriteBuffer": "7-bit I2C `address` 에 출력합니다.",
  "pins.i2cWriteNumber": "7-bit I2C 주소에 수를 출력합니다.",
  "pins.i2cWriteNumber|block": "I2C통신으로 값 출력|address %address|value %value|format %format=i2c_sizeof|repeated %repeat",
  "pins.map": "어떤 범위 안에 들어있는 값을 다른 범위의 값으로 비례적으로 변환(매핑)합니다. 즉,``현재 범위의 최솟값`` 은 ``변환시킬 범위의 최소값``으로, ``현재 범위의 최댓값`` 은 ``변환시킬 범위의 최댓값``으로 범위가 변경되고, 현재 입력 값을 새로운 범위에 있는 변환 값으로 비례적으로 변환합니다.",
  "pins.map|block": "비례 변환(map): %value|최소 %fromLow|최대 %fromHigh 에서|최소 %toLow|최대 %toHigh 범위로 변환한 값",
  "pins.map|param|fromHigh": "현재 범위의 최댓값, 예시: 1023",
  "pins.map|param|fromLow": "현재 범위의 최솟값",
  "pins.map|param|toHigh": "변환시킬 범위의 최댓값, 예시: 4",
  "pins.map|param|toLow": "변환시킬 범위의 최솟값",
  "pins.map|param|value": "비례적으로 변환시킬 현재 값",
  "pins.onPulsed": "이 핀을 디지털 입력 핀으로 설정하고, 핀의 ``high``, ``low`` 상태를 주기적으로 검사해 이벤트를 발생시킵니다.",
  "pins.onPulsed|block": "|%pin|에서 %pulse 펄스 감지되면 실행",
  "pins.onPulsed|param|name": "디지털 펄스를 감지할 핀, 예시: (디지털 입력으로 설정된) P0",
  "pins.onPulsed|param|pulse": "디지털 펄스 값, 예시: high",
  "pins.pulseDuration": "마지막으로 입력된 펄스의 지속시간을 마이크로초(μs) 단위로 읽어옵니다. 이 함수는 ``핀에서 펄스 감지되면 실행`` 의 이벤트 처리기에 의해 호출되어야 합니다.",
  "pins.pulseDuration|block": "펄스 지속시간(µs)",
  "pins.pulseIn": "펄스의 지속시간을 마이크로초(µs) 단위로 리턴합니다.",
  "pins.pulseIn|block": "|%name|의 %value 펄스 지속시간(µs)",
  "pins.pulseIn|param|name": "펄스를 측정할 핀, 예시: 디지털핀.P0",
  "pins.pulseIn|param|value": "디지털 펄스 값, 예시: high",
  "pins.servoSetPulse": "입출력 핀을 20 밀리초 주기를 가지는 아날로그/PWM 출력으로 설정하고, 마이크로초(μs) 단위의 펄스 폭을 설정합니다.",
  "pins.servoSetPulse|block": "|%value|의 서보 펄스 폭을 %micros (µs) 로 설정",
  "pins.servoSetPulse|param|micros": "펄스 폭 주기(μs), 예시:1500",
  "pins.servoSetPulse|param|name": "핀 이름",
  "pins.servoWritePin": "서보 모터의 회전 각도/속도를 제어하는 값을 출력합니다. 일반 서보 모터의 경우에는 서보 모터의 회전 각도(°)가 변합니다. 무한 회전 서보 모터의 경우에는 서보 모터의 회전 속도가 변합니다.(``0`` 은 어떤 방향의 최대 회전 속도를 의미하며, ``180`` 은 방향의 최대 회전 속도를 의미합니다. ``90`` 은 회전하지 않는 중립 상태를 의미합니다.)",
  "pins.servoWritePin|block": "|%name|에 서보 값 %value 출력",
  "pins.servoWritePin|param|name": "핀 이름, 예시: (아날로그 출력으로 설정된) P0",
  "pins.servoWritePin|param|value": "각도/속도 값, 예시:180,90,0",
  "pins.setEvents": "이 핀에 의해 발생되는 이벤트를 설정합니다. 이벤트는 ``control.onEvent()``를 통해 발생될 수 있습니다.",
  "pins.setEvents|block": "%pin|에 의해 %type|이벤트가 발생되도록 설정",
  "pins.setEvents|param|name": "이벤트 발생으로 설정할 핀 이름, 예시: (디지털 출력으로 설정된) P0",
  "pins.setEvents|param|type": "핀에 의해 발생시킬 이벤트, 예시: (설정할 이벤트 종류) 엣지 커넥터",
  "pins.setPull": "핀의 pull 저항을 설정합니다.(pull up, pull down)",
  "pins.setPull|block": "|%pin|의 저항을 pull-%pull 으로 설정",
  "pins.setPull|param|name": "pull 저항을 설정할 핀 이름, 예시: (디지털 출력으로 설정된) P0",
  "pins.setPull|param|pull": "내장 pull 설정, 예시: pull-up",
  "pins.sizeOf": "특정 수 포맷이 몇 바이트인지 읽어옵니다.",
  "pins.spiFormat": "SPI통신 비트와 모드를 설정합니다.",
  "pins.spiFormat|block": "SPI통신 형식을|bits %bits|mode %mode 으로 설정",
  "pins.spiFormat|param|bits": "비트 개수, 예시: 8",
  "pins.spiFormat|param|mode": "모드, 예시: 3",
  "pins.spiFrequency": "SPI통신 주파수를 설정합니다.",
  "pins.spiFrequency|block": "SPI통신 주파수를 %frequency (Hz) 로 설정",
  "pins.spiFrequency|param|frequency": "클록 주파수, 예시: 1000000",
  "pins.spiPins": "SPI통신에 사용할 MOSI, MISO, SCK 핀을 설정합니다.",
  "pins.spiPins|block": "SPI통신 핀을|MOSI %mosi|MISO %miso|SCK %sck 으로 설정",
  "pins.spiWrite": "SPI통신 슬레이브로 데이터를 전송한 후, 전송 결과를 리턴합니다.",
  "pins.spiWrite|block": "SPI통신으로 %value 을 전송한 결과",
  "pins.spiWrite|param|value": "SPI통신 슬레이브로 전송할 데이터",
  "pins|block": "핀",
  "radio": "라디오 패킷을 이용해 데이터를 송수신합니다.",
  "radio.Packet.receivedBuffer": "패킷에 포함되어있는 버퍼 데이터",
  "radio.Packet.receivedNumber": "(``수 전송`` 이나 ``변수값 전송`` 을 통해 전송된) 패킷에 포함되어있는 수 데이터. 패킷에 수가 포함되어있지 않은 경우 0.",
  "radio.Packet.receivedString": "(``문자열 전송`` 이나 ``변수값 전송`` 을 통해 전송된) 패킷에 포함되어있는 문자열 데이터. 패킷에 문자열이 포함되어있지 않은 경우 빈 문자열.",
  "radio.Packet.serial": "데이터 패킷을 전송한 송신 장치의 시리얼 번호. 시리얼 번호를 함께 송신하지 않은 경우 0.",
  "radio.Packet.signal": "신호 강도. RSSI(received signal strength indicator)",
  "radio.Packet.time": "전송 시간. 송신 장치에서 패킷을 전송한 시간",
  "radio._packetProperty": "패킷의 속성을 읽어옵니다.",
  "radio._packetProperty|block": "%note",
  "radio._packetProperty|param|type": "패킷의 속성, 예시: 전송 시간",
  "radio.onDataPacketReceived": "더 이상 사용되지 않습니다. 데이터수신하면 실행을 대신 사용하세요.\n라디오 패킷을 수신했을 때 실행시킬 코드를 등록합니다. 라디오 큐에서 수신된 패킷을 읽어옵니다.",
  "radio.onDataPacketReceived|block": "라디오 수신하면 실행:",
  "radio.onDataReceived": "어떤 라디오 패킷을 수신했을 때 실행시킬 코드를 등록합니다.",
  "radio.onDataReceived|block": "라디오 수신하면 실행:",
  "radio.onReceivedBuffer": "라디오를 통해 버퍼를 수신했을 때 실행시킬 코드를 등록합니다.",
  "radio.onReceivedBufferDeprecated": "라디오를 통해 버퍼를 수신할 때 실행할 코드를 등록합니다. 이 기능은 더 이상 사용되지 않습니다. 라디오 수신하면 실행 기능을 사용하세요.",
  "radio.onReceivedBufferDeprecated|block": "라디오 수신하면 실행:",
  "radio.onReceivedBuffer|block": "라디오 수신하면 실행:",
  "radio.onReceivedMessage": "특정 메시지를 받았을 때 실행시킬 코드를 등록합니다.",
  "radio.onReceivedMessage|block": "라디오 $msg 브로드캐스트 수신하면 실행",
  "radio.onReceivedMessage|param|msg": "@param handler",
  "radio.onReceivedNumber": "라디오를 통해 수를 수신했을 때 실행시킬 코드를 등록합니다.",
  "radio.onReceivedNumberDeprecated": "라디오를 통해 수를 수신할 때 실행할 코드를 등록합니다. 이 기능은 더 이상 사용되지 않습니다. 라디오 수신하면 실행 기능을 사용하세요.",
  "radio.onReceivedNumberDeprecated|block": "라디오 수신하면 실행:",
  "radio.onReceivedNumber|block": "라디오 수신하면 실행:",
  "radio.onReceivedString": "라디오를 통해 문자열을 수신했을 때 실행시킬 코드를 등록합니다.",
  "radio.onReceivedStringDeprecated": "라디오를 통해 문자열을 수신할 때 실행할 코드를 등록합니다. 이 기능은 더 이상 사용되지 않습니다. 라디오 수신하면 실행 기능을 사용하세요.",
  "radio.onReceivedStringDeprecated|block": "라디오 수신하면 실행:",
  "radio.onReceivedString|block": "라디오 수신하면 실행:",
  "radio.onReceivedValue": "라디오를 통해 변수와 값을 수신했을 때 실행시킬 코드를 등록합니다.",
  "radio.onReceivedValueDeprecated": "라디오를 통해 변수값을 수신할 때 실행할 코드를 등록합니다. 이 기능은 더 이상 사용되지 않습니다. 라디오 수신하면 실행 기능을 사용하세요.",
  "radio.onReceivedValueDeprecated|block": "라디오 수신하면 실행:",
  "radio.onReceivedValue|block": "라디오 수신하면 실행:",
  "radio.raiseEvent": "라디오 기능을 통해 주변 장치들에 이벤트를 전송합니다.",
  "radio.raiseEvent|block": "라디오 이벤트를 주변에 있는 다른 장치에 전송|소스 %src=control_event_source_id|값 %value=control_event_value_id",
  "radio.readRawPacket": "라디오 큐에 저장되어있는 다음 패킷을 가져온 후, 버퍼에 저장되어있는 내용을 리턴합니다.",
  "radio.receiveNumber": "패킷에 포함되어있는 수. 수가 포함되어있지 않은 경우 0.",
  "radio.receiveNumber|block": "수",
  "radio.receiveString": "패킷에 포함되어있는 문자열. 문자열이 포함되어있지 않은 경우 빈 문자열.",
  "radio.receiveString|block": "문자열",
  "radio.receivedBuffer": "(``수 수신``, ``문자열 수신`` 등을 통해) 마지막으로 수신한 패킷에 포함되어있는 버퍼 데이터. 문자열이 포함되어있지 않은 경우 빈 문자열.",
  "radio.receivedNumber": "(``수 수신``, ``문자열 수신`` 등을 통해) 마지막으로 수신한 패킷에 포함되어있는 수. 수가 포함되어있지 않은 경우 0.",
  "radio.receivedPacket": "마지막으로 수신한 패킷의 속성",
  "radio.receivedPacket|block": "수신된 패킷의 %type=radio_packet_property",
  "radio.receivedPacket|param|type": "속성",
  "radio.receivedSerial": "(``수 수신``, ``문자열 수신`` 등을 통해) 마지막으로 수신한 패킷에 포함되어있는 마이크로비트 시리얼 번호. 시리얼 번호가 포함되어있지 않은 경우 0.",
  "radio.receivedSignalStrength": "라디오 대기 큐(via ``receiveNumber``, ``receiveString``, etc)로 부터 얻어진 마지막 패킷에서 RSSI(received signal strength indicator)를 가져옵니다. 시뮬레이터에서는 지원되지 않습니다.\nnamespace=radio",
  "radio.receivedSignalStrength|block": "신호 강도",
  "radio.receivedString": "(``수 수신``, ``문자열 수신`` 등을 통해) 마지막으로 수신한 패킷에 포함되어있는 문자열. 문자열이 포함되어있지 않은 경우 빈 문자열.",
  "radio.receivedTime": "(``수 수신``, ``문자열 수신`` 등을 통해) 마지막으로 수신한 패킷에 포함되어있는 전송 시간.",
  "radio.sendBuffer": "같은 라디오 그룹으로 연결된 모든 마이크로비트에 버퍼값(최대 19 byte), 시리얼 번호, 시간을 전송합니다.",
  "radio.sendMessage": "라디오를 통해 메시지를 브로드캐스트합니다.",
  "radio.sendMessage|block": "라디오 브로드캐스트: $msg",
  "radio.sendNumber": "같은 라디오 그룹으로 연결된 모든 마이크로비트에 수를 전송합니다.",
  "radio.sendNumber|block": "라디오 전송:수 %value",
  "radio.sendRawPacket": "라디오를 통해 그대로 패킷을 전송합니다.",
  "radio.sendString": "같은 라디오 그룹으로 연결된 모든 마이크로비트에 문자열, 시리얼 번호와 시간을 전송합니다.",
  "radio.sendString|block": "라디오 전송:문자열 %msg",
  "radio.sendValue": "같은 라디오 그룹으로 연결된 모든 마이크로비트에 변수값, 시리얼 번호, 시간을 전송합니다. 변수는 최대 8까지만 가능합니다.",
  "radio.sendValue|block": "라디오 전송:변수값|%name|= %value",
  "radio.sendValue|param|name": "변수 이름 (최대 8 문자), 예시: \"name\"",
  "radio.sendValue|param|value": "수",
  "radio.setGroup": "라디오 그룹을 설정합니다. 마이크로비트는 1개의 그룹으로만 작동합니다.",
  "radio.setGroup|block": "라디오 그룹을 %ID 로 설정",
  "radio.setGroup|param|id": "그룹 ID. ``0`` 부터 ``255`` 까지, 예시: 1",
  "radio.setTransmitPower": "무선 신호 전송 강도를 변경합니다.",
  "radio.setTransmitPower|block": "라디오 전송 강도를 %power 로 설정",
  "radio.setTransmitPower|param|power": "전송 강도 설정 값. 0(최소 출력) ~ 7(최대 출력). 예시: 7",
  "radio.setTransmitSerialNumber": "전송 메시지에 시리얼 번호를 함께 전송하도록 할 지 설정합니다.",
  "radio.setTransmitSerialNumber|block": "라디오 시리얼 번호 전송 설정을 %transmit 으로 설정",
  "radio.setTransmitSerialNumber|param|transmit": "시리얼 번호 전송 여부, 예시: 참",
  "radio.writeReceivedPacketToSerial": "마지막에 수신한 패킷을 JSON 형식의 시리얼 통신으로 전달합니다. 이 작업은 ``라디오 수신하면`` 블록에 의해서 호출되어야 합니다.",
  "radio.writeReceivedPacketToSerial|block": "라디오 수신 패킷을 시리얼통신으로 전송",
  "radio.writeValueToSerial": "라디오 큐에서 다음 패킷을 읽어, JSON 형식의 시리얼 통신으로 전달합니다.",
  "radio.writeValueToSerial|block": "라디오 값을 시리얼로 출력",
  "radio|block": "라디오",
  "serial": "시리얼통신 연결을 통해 데이터를 읽어오고 출력합니다.",
  "serial.NEW_LINE": "새로운 입력으로 사용할 문자열, 기본은 \\r\\n",
  "serial.delimiters": "데이터 분리를 위한 구분 기호",
  "serial.delimiters|block": "%del",
  "serial.onDataReceived": "구분 기호가 감지되었을 때 실행시킬 이벤트를 등록합니다.",
  "serial.onDataReceived|block": "시리얼통신|%delimiters=serial_delimiter_conv 입력되면 실행",
  "serial.onDataReceived|param|delimiters": "구분 기호",
  "serial.readBuffer": "버퍼에서 문자열을 읽어들입니다. 지정한 개수의 문자가 채워지면 문자열을 리턴합니다.",
  "serial.readBuffer|block": "|%length 문자 버퍼값",
  "serial.readBuffer|param|length": "버퍼 길이, 예시: 64",
  "serial.readLine": "시리얼통신으로 수신한 텍스트 한 줄",
  "serial.readLine|block": "시리얼통신|수신값:한 줄",
  "serial.readString": "시리얼통신으로 수신한 문자열",
  "serial.readString|block": "시리얼통신|수신값:문자열",
  "serial.readUntil": "시리얼통신으로 수신한 텍스트 (구분 기호로 분리됨)",
  "serial.readUntil|block": "시리얼통신|수신값: %delimiter=serial_delimiter_conv 전까지",
  "serial.readUntil|param|delimiter": "문자열을 분리하는데 사용되는 구분 기호",
  "serial.redirect": "시리얼통신 입출력으로 핀을 사용하도록 설정합니다.",
  "serial.redirectToUSB": "시리얼통신 입출력으로 USB 연결을 사용하도록 설정합니다.",
  "serial.redirectToUSB|block": "시리얼통신 연결 설정:|USB",
  "serial.redirect|block": "|시리얼통신 연결 설정:|TX %tx|RX %rx|baud rate %rate",
  "serial.redirect|param|rate": "전송 속도. 예시: 115200",
  "serial.redirect|param|rx": "새로운 수신 핀, 예시: 시리얼핀.P1",
  "serial.redirect|param|tx": "전송 핀, 예시: P0",
  "serial.setRxBufferSize": "수신(RX) 버퍼의 크기를 바이트 단위로 설정합니다.",
  "serial.setRxBufferSize|param|size": "수신(RX) 버퍼 크기(바이트), 예시: 32",
  "serial.setTxBufferSize": "전송(TX) 버퍼의 크기를 바이트 단위로 설정합니다.",
  "serial.setTxBufferSize|param|size": "전송(TX) 버퍼 크기(바이트), 예시: 32",
  "serial.writeBuffer": "시리얼통신으로 버퍼에 저장되어있는 내용을 전송합니다.",
  "serial.writeBuffer|block": "시리얼통신|전송:%buffer=serial_readbuffer",
  "serial.writeLine": "시리얼통신으로 한 줄 텍스트를 전송합니다.",
  "serial.writeLine|block": "시리얼통신|전송:한 줄 %text",
  "serial.writeNumber": "시리얼통신으로 수를 전송합니다.",
  "serial.writeNumbers": "시리얼통신으로 수 배열값을 콤마(,) 기호로 구분해 출력합니다. CSV 형식",
  "serial.writeNumbers|block": "시리얼통신|전송:수 배열 %values",
  "serial.writeNumber|block": "시리얼통신|전송:수 %value",
  "serial.writeString": "시리얼통신으로 문자열을 전송합니다.",
  "serial.writeString|block": "시리얼통신|전송:문자열 %text",
  "serial.writeValue": "시리얼통신으로 변수 이름과 값을 전송합니다.",
  "serial.writeValue|block": "시리얼통신|전송:변수값 %name|= %value",
  "serial.writeValue|param|name": "변수값 이름, 예시: x",
  "serial.writeValue|param|value": "값",
  "serial|block": "시리얼통신",
  "servos.P0|block": "서보 P0",
  "servos.P1|block": "서보 P1",
  "servos.P2|block": "서보 P2",
  "servos.Servo.maxAngle": "서보 모터의 최대 회전 각도를 가져옵니다.",
  "servos.Servo.minAngle": "서보 모터의 최소 회전 각도를 가져옵니다.",
  "servos.Servo.run": "무한회전 서보의 회전 속도를 설정합니다.",
  "servos.Servo.run|block": "%servo 무한 서보의 회전 속도를 %speed=speedPicker \\% 로 설정",
  "servos.Servo.run|param|speed": "회전 속도의 범위는 -100% 부터 100% 까지입니다.",
  "servos.Servo.setAngle": "서보 각도 설정",
  "servos.Servo.setAngle|block": "%servo 서보의 각도를 %degrees=protractorPicker (°) 로 설정",
  "servos.Servo.setPulse": "서보의 펄스 주기를 밀리초 단위로 설정합니다.",
  "servos.Servo.setPulse|block": "%servo 서보의 펄스를 %micros (μs) 로 설정",
  "servos.Servo.setPulse|param|micros": "마이크로초 단위의 주기",
  "servos.Servo.setRange": "서보 모터의 회전 각도를 0 부터 180 까지의 범위로 조정합니다.",
  "servos.Servo.setRange|block": "서보 %servo 의 각도를 %minAngle 부터 %maxAngle 까지의 범위로 설정",
  "servos.Servo.setRange|param|maxAngle": "90 부터 180 까지 범위의 최대 회전 각도",
  "servos.Servo.setRange|param|minAngle": "0 부터 90 까지 범위의 최소 회전 각도",
  "servos.Servo.setStopOnNeutral": "회전 각도가 중립 (0%) 일 때 서보를 정지시키는 모드를 설정합니다.",
  "servos.Servo.setStopOnNeutral|block": "서보 %servo 를 중립 상태 %on 에서 정지하도록 설정",
  "servos.Servo.stop": "서보에 정지 명령을 보내서 현재 위치에서 정지하도록 합니다.",
  "servos.Servo.stop|block": "%servo 정지",
  "{id:category}AnalogInPin": "아날로그입력핀",
  "{id:category}AnalogOutPin": "아날로그출력핀",
  "{id:category}Array": "배열",
  "{id:category}Arrays": "배열",
  "{id:category}Basic": "기본",
  "{id:category}Bluetooth": "블루투스",
  "{id:category}Boolean": "불(참, 거짓) 논리 연산",
  "{id:category}Buffer": "버퍼",
  "{id:category}Console": "명령어 입출력 콘솔",
  "{id:category}Control": "고급제어",
  "{id:category}Devices": "장치제어",
  "{id:category}DigitalInOutPin": "디지털출력핀",
  "{id:category}Fx": "Fx",
  "{id:category}Fx8": "Fx8",
  "{id:category}Game": "게임",
  "{id:category}Helpers": "도움말",
  "{id:category}Image": "이미지",
  "{id:category}Images": "이미지",
  "{id:category}Input": "입력",
  "{id:category}Led": "LED",
  "{id:category}Math": "계산",
  "{id:category}MicrobitPin": "마이크로비트핀",
  "{id:category}Msgpack": "메시지팩",
  "{id:category}Music": "음악",
  "{id:category}Number": "수",
  "{id:category}Object": "객체",
  "{id:category}Pins": "핀",
  "{id:category}PwmOnlyPin": "PWM전용핀",
  "{id:category}Radio": "라디오",
  "{id:category}Serial": "시리얼통신",
  "{id:category}Servos": "서보",
  "{id:category}String": "문자열",
  "{id:category}Text": "텍스트",
  "{id:group}Configuration": "설정",
  "{id:group}Continuous": "무한 회전",
  "{id:group}Positional": "각도 회전"
}