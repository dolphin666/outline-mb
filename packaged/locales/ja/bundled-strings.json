{
  "AcceleratorRange.EightG": "8Gまでの加速度を測ります。",
  "AcceleratorRange.EightG|block": "8G",
  "AcceleratorRange.FourG": "4Gまでの加速度を測ります。",
  "AcceleratorRange.FourG|block": "4G",
  "AcceleratorRange.OneG": "1Gまでの加速度を測ります。",
  "AcceleratorRange.OneG|block": "1G",
  "AcceleratorRange.TwoG": "2Gまでの加速度を測ります。",
  "AcceleratorRange.TwoG|block": "2G",
  "AnalogPin.P11|block": "P11（出力のみ）",
  "AnalogPin.P12|block": "P12（出力のみ）",
  "AnalogPin.P13|block": "P13（出力のみ）",
  "AnalogPin.P14|block": "P14（出力のみ）",
  "AnalogPin.P15|block": "P15（出力のみ）",
  "AnalogPin.P16|block": "P16（出力のみ）",
  "AnalogPin.P19|block": "P19（出力のみ）",
  "AnalogPin.P20|block": "P20（出力のみ）",
  "AnalogPin.P5|block": "P5（出力のみ）",
  "AnalogPin.P6|block": "P6（出力のみ）",
  "AnalogPin.P7|block": "P7（出力のみ）",
  "AnalogPin.P8|block": "P8（出力のみ）",
  "AnalogPin.P9|block": "P9（出力のみ）",
  "Array.filter": "コールバック関数で指定された条件を満たす配列の要素を返します。",
  "Array.filter|param|callbackfn": "最大 2 つの引数を受け取る関数。filter メソッドは配列の各要素に対して 1 回 callbackfn 関数を呼び出します。",
  "Array.get|param|index": "0 から始まるアイテムのリスト中の位置。たとえば：0",
  "Array.indexOf": "配列内で値が最初に出現する位置を返します。",
  "Array.indexOf|block": "%list(配列)|中の%value|の場所",
  "Array.indexOf|param|fromIndex": "検索を開始する配列の場所。fromIndex を省略した場合、検索は位置 0 から始まります。",
  "Array.indexOf|param|item": "配列内で検索する値。",
  "Array.insertAt|block": "%list(配列)|の%index|番目に%value|を挿入する",
  "Array.insertAt|param|index": "値を挿入するリスト中の位置を 0 から始まる値で指定します。たとえば：0",
  "Array.length|block": "配列 %VALUE|の長さ",
  "Array.map": "配列の各要素に対して定義されたコールバック関数を呼び出し、結果を含む配列を返します。",
  "Array.map|param|callbackfn": "最大 2 つの引数を受け取る関数。map メソッドは配列の各要素に対して 1 回ずつ callbackfn 関数を呼び出します。",
  "Array.pop": "配列から最後の要素を削除し、その値を返します。",
  "Array.pop|block": "%list(配列)|の最後の値を返して取り除く",
  "Array.push|block": "%list(配列)|の最後に%value|を追加する",
  "Array.reduce": "配列のすべての要素に対して指定されたコールバック関数を呼び出します。コールバック関数の戻り値は累積した結果となり、次回コールバック関数が呼び出された際の引数として提供されます。",
  "Array.reduce|param|callbackfn": "最大 3 つの引数を受け取る関数。reduce メソッドは配列の各要素に対して 1 回ずつ callbackfn 関数を呼び出します。",
  "Array.reduce|param|initialValue": "累積を開始する初期値。callbackfn 関数の初回呼び出し時にはこの値を配列の値ではなく、引数として提供します。",
  "Array.removeAt": "特定の位置にある要素を削除します。",
  "Array.removeAt|block": "%list(配列)|の%index|番目の値を返して取り除く",
  "Array.reverse": "配列に含まれる要素を逆の順番にします。最初の配列要素は最後の要素となり、最後の配列要素は最初の要素となります。",
  "Array.reverse|block": "%list(配列)|を逆順にする",
  "Array.set|param|index": "値を格納するリスト中の位置を 0 から始まる値で指定します。たとえば：0",
  "Array.shift": "配列から最初の要素を削除し、その値を返します。このメソッドは、配列の長さを変更します。",
  "Array.shift|block": "%list(配列)|の最初の値を返して取り除く",
  "Array.slice": "配列の一部を返します。",
  "Array.slice|param|end": "配列の指定部分の終了位置。たとえば：0",
  "Array.slice|param|start": "配列の指定部分の開始位置。たとえば：0",
  "Array.sort": "配列の要素を並び替えた後、配列を返します。並び順は必ずしも安定しているとは限りません。",
  "Array.splice": "配列から要素を削除します。",
  "Array.splice|param|deleteCount": "削除する要素の数。たとえば：0",
  "Array.splice|param|start": "要素の削除を開始する配列内の 0 から始まる位置。たとえば：0",
  "Array.unshift": "配列の先頭に要素を 1 つ追加して、配列の新しい長さを返します。",
  "Array.unshift|block": "%list(配列)|の先頭に%value|を挿入する",
  "Array|block": "配列",
  "ArrowNames.East|block": "右向き　　→",
  "ArrowNames.NorthEast|block": "右上向き　↗",
  "ArrowNames.NorthWest|block": "左上向き　↖",
  "ArrowNames.North|block": "上向き　　↑",
  "ArrowNames.SouthEast|block": "右下向き　↘",
  "ArrowNames.SouthWest|block": "左下向き　↙",
  "ArrowNames.South|block": "下向き　　↓",
  "ArrowNames.West|block": "左向き　　←",
  "BaudRate.BaudRate115200|block": "115200",
  "BaudRate.BaudRate1200|block": "1200",
  "BaudRate.BaudRate14400|block": "14400",
  "BaudRate.BaudRate19200|block": "19200",
  "BaudRate.BaudRate2400|block": "2400",
  "BaudRate.BaudRate28800|block": "28800",
  "BaudRate.BaudRate31250|block": "31250",
  "BaudRate.BaudRate38400|block": "38400",
  "BaudRate.BaudRate4800|block": "4800",
  "BaudRate.BaudRate57600|block": "57600",
  "BaudRate.BaudRate9600|block": "9600",
  "BeatFraction.Breve|block": "4",
  "BeatFraction.Double|block": "2",
  "BeatFraction.Eighth|block": "1/8",
  "BeatFraction.Half|block": "1/2",
  "BeatFraction.Quarter|block": "1/4",
  "BeatFraction.Sixteenth|block": "1/16",
  "BeatFraction.Whole|block": "1",
  "Boolean.toString": "オブジェクトの文字列表現を返します。",
  "Buffer.fill": "バッファー（のフラグメント）を指定の値で埋めます。",
  "Buffer.getNumber": "バッファーから指定された形式で数値を読み出します。",
  "Buffer.length": "バッファーオブジェクトの長さを返します。",
  "Buffer.rotate|param|offset": "シフトするバイト数。右にシフトするには負の値を使用します。",
  "Buffer.rotate|param|start": "バッファーの開始オフセット。既定値は 0 です。",
  "Buffer.setNumber": "バッファーに指定された形式で数値を書き込みます。",
  "Buffer.shift|param|offset": "シフトするバイト数。右にシフトするには負の値を使用します。",
  "Buffer.shift|param|start": "バッファーの開始オフセット。既定値は 0 です。",
  "Buffer.slice": "バッファーのフラグメントのコピーを返します。",
  "Buffer.write": "`dstOffset` にある `src` の内容を現在のバッファーに書き込みます。",
  "Button.AB|block": "A+B",
  "Delimiters.Colon|block": "コロン「:」",
  "Delimiters.Comma|block": "カンマ「,」",
  "Delimiters.Dollar|block": "ドルマーク「$」",
  "Delimiters.Fullstop|block": ".",
  "Delimiters.Hash|block": "シャープ「#」",
  "Delimiters.NewLine|block": "改行",
  "Dimension.Strength|block": "絶対値",
  "Dimension.X|block": "X",
  "Dimension.Y|block": "Y",
  "Dimension.Z|block": "Z",
  "Direction.Left|block": "左",
  "Direction.Right|block": "右",
  "DisplayMode.BlackAndWhite|block": "白黒",
  "DisplayMode.Greyscale|block": "グレースケール",
  "EventCreationMode": "イベントの作成方法。",
  "EventCreationMode.CreateAndFire": "MicroBitEventは初期化され、直後にイベントハンドラーが実行されます（割り込みでの使用には適していません）。",
  "EventCreationMode.CreateOnly": "MicroBitEventは初期化されますが、その他の処理は行われません。",
  "Gesture.EightG": "8Gの衝撃があったときに発生します。",
  "Gesture.EightG|block": "8G",
  "Gesture.FreeFall": "ボードを落としたときに発生します。",
  "Gesture.FreeFall|block": "落とした",
  "Gesture.LogoDown": "画面が垂直で、ロゴの位置が下になったときに発生します。",
  "Gesture.LogoDown|block": "ロゴが下になった",
  "Gesture.LogoUp": "画面が垂直で、ロゴの位置が上になったときに発生します。",
  "Gesture.LogoUp|block": "ロゴが上になった",
  "Gesture.ScreenDown": "ボードが水平で、画面が下向きになったときに発生します。",
  "Gesture.ScreenDown|block": "画面が下になった",
  "Gesture.ScreenUp": "ボードが水平で、画面が上向きになったときに発生します。",
  "Gesture.ScreenUp|block": "画面が上になった",
  "Gesture.Shake": "ボードがゆさぶられたときに発生します。",
  "Gesture.Shake|block": "ゆさぶられた",
  "Gesture.SixG": "6Gの衝撃があったときに発生します。",
  "Gesture.SixG|block": "6G",
  "Gesture.ThreeG": "3Gの衝撃があったときに発生します。",
  "Gesture.ThreeG|block": "3G",
  "Gesture.TiltLeft": "画面を左に傾けたときに発生します。",
  "Gesture.TiltLeft|block": "左に傾けた",
  "Gesture.TiltRight": "画面を右に傾けたときに発生します。",
  "Gesture.TiltRight|block": "右に傾けた",
  "IconNames.Angry|block": "おこり顔",
  "IconNames.Asleep|block": "ねてる顔",
  "IconNames.Butterfly|block": "ちょうちょ",
  "IconNames.Chessboard|block": "チェスボード",
  "IconNames.Confused|block": "こまり顔",
  "IconNames.Cow|block": "うし",
  "IconNames.Diamond|block": "ダイアモンド",
  "IconNames.Duck|block": "あひる",
  "IconNames.EigthNote|block": "8分音符",
  "IconNames.Fabulous|block": "すばらしい",
  "IconNames.Ghost|block": "おばけ",
  "IconNames.Giraffe|block": "きりん",
  "IconNames.Happy|block": "うれしい顔",
  "IconNames.Heart|block": "ハート",
  "IconNames.House|block": "家",
  "IconNames.LeftTriangle|block": "左向き三角",
  "IconNames.Meh|block": "ふーん",
  "IconNames.No|block": "バツ",
  "IconNames.Pitchfork|block": "くまで",
  "IconNames.QuarterNote|block": "4分音符",
  "IconNames.Rabbit|block": "うさぎ",
  "IconNames.Rollerskate|block": "ローラースケート",
  "IconNames.Sad|block": "かなしい顔",
  "IconNames.Scissors|block": "はさみ",
  "IconNames.Silly|block": "へん顔",
  "IconNames.Skull|block": "がいこつ",
  "IconNames.SmallDiamond|block": "小さいダイアモンド",
  "IconNames.SmallHeart|block": "小さいハート",
  "IconNames.SmallSquare|block": "小さいしかく",
  "IconNames.Snake|block": "へび",
  "IconNames.Square|block": "しかく",
  "IconNames.StickFigure|block": "棒人間",
  "IconNames.Surprised|block": "びっくり顔",
  "IconNames.Sword|block": "剣",
  "IconNames.TShirt|block": "Tシャツ",
  "IconNames.Target|block": "まと",
  "IconNames.Tortoise|block": "かめ",
  "IconNames.Triangle|block": "三角",
  "IconNames.Umbrella|block": "かさ",
  "IconNames.Yes|block": "チェック",
  "Image.clear": "すべてのピクセルをオフに設定します。",
  "Image.height": "高さを行数で取得します（常に 5）",
  "Image.pixel": "位置 ``(x,y)`` のピクセルの状態を取得します",
  "Image.pixelBrightness": "指定位置のピクセルの明るさ（[0..255]）を取得します",
  "Image.plotFrame": "画面上に画像の ``index`` 番目のフレームを描きます。",
  "Image.plotFrame|param|xOffset": "画像の表示を開始する列の位置",
  "Image.plotImage": "画面上の指定の列に画像をプロットします",
  "Image.scrollImage": "画像をスクロールします。",
  "Image.scrollImage|block": "%sprite(画像)|を %frameoffset|ドットずつ %delay|ミリ秒ごとにスクロール",
  "Image.scrollImage|param|frameOffset": "各アニメーションステップで移動する x 方向のオフセット。たとえば：1、2、5",
  "Image.scrollImage|param|interval": "各アニメーションステップ間の時間（ミリ秒単位）。たとえば：200",
  "Image.setPixel": "位置 ``(x,y)`` のピクセルの状態を設定します",
  "Image.setPixelBrightness": "指定位置での特定のピクセルの明るさを設定します",
  "Image.showImage": "``x 方向のオフセット`` 位置にある画像のフレームを表示します。",
  "Image.showImage|block": "%sprite(画像)|を %offset|ドットずらして表示",
  "Image.showImage|param|xOffset": "画像の表示を開始する列の位置",
  "Image.width": "幅を列数で取得",
  "LedSpriteProperty.Blink|block": "点滅",
  "LedSpriteProperty.Brightness|block": "明るさ",
  "LedSpriteProperty.Direction|block": "方向",
  "LedSpriteProperty.X|block": "X",
  "LedSpriteProperty.Y|block": "Y",
  "Math": "より複雑な数値演算を行います。",
  "Math.abs": "数値の絶対値を返します（絶対値とはゼロとの距離です）。たとえば、-5の絶対値は、5の絶対値と同じく「5」です。",
  "Math.abs|param|x": "絶対値が必要な数値式を指定します。",
  "Math.acos": "数値のアークコサイン（ラジアン表記）を返します。",
  "Math.acos|param|x": "数値",
  "Math.asin": "数値のアークサイン（ラジアン表記）を返します。",
  "Math.asin|param|x": "数値",
  "Math.atan": "数値のアークタンジェント（ラジアン表記）を返します。",
  "Math.atan2": "左の値を右の値で割った結果のアークタンジェントを返します。",
  "Math.atan2|param|x": "数値",
  "Math.atan2|param|y": "数値",
  "Math.atan|param|x": "数値",
  "Math.ceil": "引数で指定された数値以上の最小値を返します。",
  "Math.constrain|block": "%value|を %low|以上 %high|以下の範囲に制限",
  "Math.cos": "数値のコサインを返します。",
  "Math.cos|param|x": "ラジアン表記の角度",
  "Math.exp": "``e^x`` を返します。",
  "Math.exp|param|x": "数値",
  "Math.floor": "引数で指定された数値以下の最大値を返します。",
  "Math.idiv": "2 つの数値の商を符号付 32 ビット整数値で返します。",
  "Math.idiv|param|x": "最初の数値",
  "Math.idiv|param|y": "二番目の数値",
  "Math.imul": "2 つの数値の積を符号付 32 ビット整数値で返します。",
  "Math.imul|param|x": "最初の数値",
  "Math.imul|param|y": "二番目の数値",
  "Math.log": "数値の自然対数（底 e）を返します。",
  "Math.log|param|x": "数値",
  "Math.map|block": "数値をマップする %value|元の下限 %fromLow|元の上限 %fromHigh|結果の下限 %toLow|結果の上限 %toHigh",
  "Math.map|param|fromHigh": "元の値の上限。たとえば：1023",
  "Math.map|param|fromLow": "元の値の下限。",
  "Math.map|param|toHigh": "結果の値の上限。たとえば：4",
  "Math.map|param|toLow": "結果の値の下限。",
  "Math.map|param|value": "変換する、元の値。",
  "Math.max": "指定された2つの数値式のうち、大きい方を返します。",
  "Math.min": "指定された2つの数値式のうち、小さい方を返します。",
  "Math.pow|param|x": "式の底の値を指定します。",
  "Math.pow|param|y": "式の指数値を指定します。",
  "Math.randomBoolean": "「真」か「偽」をランダムに生成します。",
  "Math.randomBoolean|block": "ランダムに真か偽に決める",
  "Math.randomRange": "min と max の間に含まれる疑似乱数を返します。両方の数値が整数値の場合は、結果も整数値となります。",
  "Math.randomRange|block": "%min|から %limit|までの乱数",
  "Math.randomRange|param|max": "境界を含めた上限。たとえば：10",
  "Math.randomRange|param|min": "境界を含めた下限。たとえば：0",
  "Math.round|param|x": "最も近い数値に丸められる値。",
  "Math.sign": "x が正、負、または 0 のどれであるかを示す符号を返します。",
  "Math.sign|param|x": "テストする数値式",
  "Math.sin": "数値のサインを返します。",
  "Math.sin|param|x": "ラジアン表記の角度",
  "Math.sqrt|param|x": "数値表現を指定します。",
  "Math.tan": "数値のタンジェントを返します。",
  "Math.tan|param|x": "ラジアン表記の角度",
  "Math.trunc": "小数部を切り捨てた数値を返します。",
  "Math|block": "計算",
  "Melodies.BaDing|block": "ピコーン！",
  "Melodies.Baddy|block": "タッタラッタッター",
  "Melodies.Birthday|block": "ハッピーバースデー",
  "Melodies.Blues|block": "ブルース",
  "Melodies.Chase|block": "チェイス",
  "Melodies.Dadadadum|block": "ダダダム",
  "Melodies.Entertainer|block": "ジ・エンターテイナー",
  "Melodies.Funeral|block": "おそうしき",
  "Melodies.Funk|block": "ファンク",
  "Melodies.JumpDown|block": "ジャンプダウン",
  "Melodies.JumpUp|block": "ジャンプアップ",
  "Melodies.Nyan|block": "ニャン・キャット",
  "Melodies.Ode|block": "歓喜の歌",
  "Melodies.PowerDown|block": "パワーダウン",
  "Melodies.PowerUp|block": "パワーアップ",
  "Melodies.Prelude|block": "プレリュード",
  "Melodies.Punchline|block": "ちゃんちゃん♪",
  "Melodies.Ringtone|block": "着信メロディ",
  "Melodies.Wawawawaa|block": "ワワワワー",
  "Melodies.Wedding|block": "ウェディング・マーチ",
  "MelodyOptions.ForeverInBackground|block": "バックグラウンドでずっと",
  "MelodyOptions.Forever|block": "ずっと",
  "MelodyOptions.OnceInBackground|block": "バックグラウンドで一度だけ",
  "MelodyOptions.Once|block": "一度だけ",
  "MelodyStopOptions.All|block": "すべて",
  "MelodyStopOptions.Background|block": "バックグラウンド再生",
  "MelodyStopOptions.Foreground|block": "フォアグラウンド再生",
  "MesAlertEvent.DisplayToast|block": "トーストを表示",
  "MesAlertEvent.FindMyPhone|block": "自分の携帯電話を探す",
  "MesAlertEvent.PlayRingtone|block": "着信音を再生する",
  "MesAlertEvent.PlaySound|block": "音を鳴らす",
  "MesAlertEvent.RingAlarm2|block": "アラーム2を鳴らす",
  "MesAlertEvent.RingAlarm3|block": "アラーム3を鳴らす",
  "MesAlertEvent.RingAlarm4|block": "アラーム4を鳴らす",
  "MesAlertEvent.RingAlarm5|block": "アラーム5を鳴らす",
  "MesAlertEvent.RingAlarm6|block": "アラーム6を鳴らす",
  "MesAlertEvent.RingAlarm|block": "アラームを鳴らす",
  "MesAlertEvent.Vibrate|block": "バイブレーターを振動させる",
  "MesCameraEvent.LaunchPhotoMode|block": "写真撮影モードにする",
  "MesCameraEvent.LaunchVideoMode|block": "動画撮影モードにする",
  "MesCameraEvent.StartVideoCapture|block": "動画撮影を開始する",
  "MesCameraEvent.StopPhotoMode|block": "写真撮影モードを停止する",
  "MesCameraEvent.StopVideoCapture|block": "動画撮影を停止する",
  "MesCameraEvent.StopVideoMode|block": "動画撮影モードを停止する",
  "MesCameraEvent.TakePhoto|block": "写真を撮影する",
  "MesCameraEvent.ToggleFrontRear|block": "前後カメラを切り替える",
  "MesDeviceInfo.DisplayOff|block": "画面表示オフ",
  "MesDeviceInfo.DisplayOn|block": "画面表示オン",
  "MesDeviceInfo.IncomingCall|block": "電話の着信",
  "MesDeviceInfo.IncomingMessage|block": "メッセージの着信",
  "MesDeviceInfo.OrientationLandscape|block": "横長画面モード",
  "MesDeviceInfo.OrientationPortrait|block": "縦長画面モード",
  "MesDeviceInfo.Shaken|block": "ゆさぶられた",
  "MesDpadButtonInfo.ADown|block": "Aを押した",
  "MesDpadButtonInfo.AUp|block": "Aをはなした",
  "MesDpadButtonInfo.BDown|block": "Bを押した",
  "MesDpadButtonInfo.BUp|block": "Bをはなした",
  "MesDpadButtonInfo.CDown|block": "Cを押した",
  "MesDpadButtonInfo.CUp|block": "Cをはなした",
  "MesDpadButtonInfo.DDown|block": "Dを押した",
  "MesDpadButtonInfo.DUp|block": "Dをはなした",
  "MesDpadButtonInfo._1Down|block": "1を押した",
  "MesDpadButtonInfo._1Up|block": "1をはなした",
  "MesDpadButtonInfo._2Down|block": "2を押した",
  "MesDpadButtonInfo._2Up|block": "2をはなした",
  "MesDpadButtonInfo._3Down|block": "3を押した",
  "MesDpadButtonInfo._3Up|block": "3をはなした",
  "MesDpadButtonInfo._4Down|block": "4を押した",
  "MesDpadButtonInfo._4Up|block": "4をはなした",
  "MesRemoteControlEvent.forward|block": "早送り",
  "MesRemoteControlEvent.nextTrack|block": "次の曲",
  "MesRemoteControlEvent.pause|block": "一時停止",
  "MesRemoteControlEvent.play|block": "再生",
  "MesRemoteControlEvent.previousTrack|block": "前の曲",
  "MesRemoteControlEvent.rewind|block": "巻き戻し",
  "MesRemoteControlEvent.stop|block": "停止",
  "MesRemoteControlEvent.volumeDown|block": "音量を下げる",
  "MesRemoteControlEvent.volumeUp|block": "音量を上げる",
  "MusicEvent.BackgroundMelodyEnded|block": "バックグラウンドのメロディが終わった",
  "MusicEvent.BackgroundMelodyNotePlayed|block": "バックグラウンドのメロディの音を出した",
  "MusicEvent.BackgroundMelodyPaused|block": "バックグラウンドのメロディを一時停止した",
  "MusicEvent.BackgroundMelodyRepeated|block": "バックグラウンドのメロディをくり返した",
  "MusicEvent.BackgroundMelodyResumed|block": "バックグラウンドのメロディを再開した",
  "MusicEvent.BackgroundMelodyStarted|block": "バックグラウンドのメロディを開始した",
  "MusicEvent.MelodyEnded|block": "メロディが終わった",
  "MusicEvent.MelodyNotePlayed|block": "メロディの音を出した",
  "MusicEvent.MelodyRepeated|block": "メロディをくり返した",
  "MusicEvent.MelodyStarted|block": "メロディを開始した",
  "Note.CSharp3|block": "C#3",
  "Note.CSharp4|block": "C#4",
  "Note.CSharp5|block": "C#5",
  "Note.CSharp|block": "C#",
  "Note.FSharp3|block": "F#3",
  "Note.FSharp4|block": "F#4",
  "Note.FSharp5|block": "F#5",
  "Note.FSharp|block": "F#",
  "Note.GSharp3|block": "G#3",
  "Note.GSharp4|block": "G#4",
  "Note.GSharp5|block": "G#5",
  "Note.GSharp|block": "G#",
  "Number|block": "数値",
  "PinEvent.Fall|block": "落下した",
  "PinEventType.Edge|block": "変化",
  "PinEventType.None|block": "なし",
  "PinEventType.Pulse|block": "パルス",
  "PinEventType.Touch|block": "タッチ",
  "PinPullMode.PullDown|block": "プルダウン",
  "PinPullMode.PullNone|block": "なし",
  "PinPullMode.PullUp|block": "プルアップ",
  "PulseValue.High|block": "正パルス",
  "PulseValue.Low|block": "負パルス",
  "RadioPacketProperty.SerialNumber|block": "シリアル番号",
  "RadioPacketProperty.SignalStrength|block": "信号強度",
  "RadioPacketProperty.Time|block": "時刻",
  "Rotation.Pitch|block": "ピッチ",
  "Rotation.Roll|block": "ロール",
  "String.charAt": "指定した位置にある文字を返します。",
  "String.charAt|block": "文字列 %this=text|の %pos|番目の文字",
  "String.charCodeAt": "指定された位置にある文字の Unicode 値を返します。",
  "String.charCodeAt|param|index": "目的の文字の位置を 0 から始まる値で指定します。指定した位置に文字がない場合は、NaN が返されます。",
  "String.compare": "2 つの文字列の文字の順序にどのような違いがあるかを確認してください (ASCII エンコーディングで)。",
  "String.compare|block": "文字列を比べる %this=text|と %that",
  "String.compare|param|that": "ターゲット文字列と比較する文字列",
  "String.concat": "2つ以上の文字列を連結した文字列を返します。",
  "String.fromCharCode": "指定された文字コードから、その文字コードに相当する文字1文字だけを含む文字列を作ります。",
  "String.fromCharCode|block": "文字コード %code|の文字",
  "String.isEmpty": "文字列が空かどうかを示す値を返します",
  "String.isEmpty|block": "%this=text|が空",
  "String.length|block": "文字列 %VALUE|の文字数",
  "String.slice": "現在の文字列の部分文字列を返します。",
  "String.substr": "現在の文字列の部分文字列を返します。",
  "String.substr|block": "文字列 %this=text|の %start|番目から %length|文字",
  "String|block": "文字列",
  "basic": "micro:bitの基礎的な機能へのアクセスを提供します。",
  "basic.clearScreen": "すべてのLEDをオフにします。",
  "basic.clearScreen|block": "表示を消す",
  "basic.forever": "コードを、ずっとバックグラウンドでくり返します。くり返しの1回ごとに、ほかのコードを実行する時間を与えます。",
  "basic.forever|block": "ずっと",
  "basic.pause": "ミリ秒で指定された時間、一時停止します。",
  "basic.pause|block": "一時停止（ミリ秒） %pause",
  "basic.pause|param|ms": "ひと休みする時間の長さ（ミリ秒）。たとえば：100、200、500、1000、2000",
  "basic.plotLeds": "LED画面に画像を表示します。",
  "basic.plotLeds|param|leds": "点灯・消灯させるLEDのパターン",
  "basic.showAnimation": "LED画面にアニメーションを表示します。",
  "basic.showAnimation|param|interval": "LED画面の描画の間隔（ミリ秒）",
  "basic.showAnimation|param|leds": "点灯・消灯させるLEDのパターン",
  "basic.showArrow": "LED画面に矢印を表示します。",
  "basic.showArrow|block": "矢印を表示 %i=device_arrow",
  "basic.showArrow|param|direction": "矢印の方向",
  "basic.showArrow|param|interval": "アイコンを表示する時間（ミリ秒）。省略したときの値は600です。",
  "basic.showIcon": "選択されたアイコンを、LED画面に表示します。",
  "basic.showIcon|block": "アイコンを表示 %i",
  "basic.showIcon|param|interval": "アイコンを表示する時間（ミリ秒）。省略したときの値は600です。",
  "basic.showLeds": "LED画面に画像を表示します。",
  "basic.showLeds|block": "LED画面に表示",
  "basic.showLeds|param|interval": "描画のあとにひと休みする時間（ミリ秒）",
  "basic.showLeds|param|leds": "点灯・消灯させるLEDのパターン",
  "basic.showNumber": "画面上のに数字をスクロールさせます。数が1桁で、画面上に収まる場合、スクロールしません。",
  "basic.showNumber|block": "数を表示|%number",
  "basic.showNumber|param|interval": "スクロールの速度。たとえば：150、100、200、-100",
  "basic.showString": "一度に1文字ずつ、テキストを画面に表示します。1文字だけの場合は、スクロールしません。",
  "basic.showString|block": "文字列を表示|%text",
  "basic.showString|param|interval": "文字を横スクロールさせる速度。たとえば：150、100、200、-100",
  "basic.showString|param|text": "LED画面に表示する文字列。たとえば「Hello!」",
  "basic|block": "基本",
  "bluetooth": "その他のBluetoothサービス",
  "bluetooth.advertiseUid": "Eddystone UIDをアドバタイズする",
  "bluetooth.advertiseUidBuffer": "Eddystone UIDをアドバタイズする",
  "bluetooth.advertiseUidBuffer|param|connectable": "他のサービスに接続可能のままにするには真、そうでないなら偽。",
  "bluetooth.advertiseUidBuffer|param|nsAndInstance": "ネームスペース（0～9バイト目）とインスタンス（10～15バイト目）からなる、16バイトのバッファー",
  "bluetooth.advertiseUidBuffer|param|power": "0～7の範囲の送信強度。たとえば：7",
  "bluetooth.advertiseUid|block": "Bluetooth UIDをアドバタイズ|ネームスペース（6～9バイト目） %ns|インスタンス（2～6バイト）\n %instance|出力強度 %power|接続可能 %connectable",
  "bluetooth.advertiseUid|param|connectable": "他のサービスに接続可能のままにするには真、そうでないなら偽。",
  "bluetooth.advertiseUid|param|instance": "インスタンスUIDの最後の4バイト",
  "bluetooth.advertiseUid|param|ns": "ネームスペースUIDの最後の4バイト",
  "bluetooth.advertiseUid|param|power": "0～7の範囲の送信強度。たとえば：7",
  "bluetooth.advertiseUrl": "Eddystone URLをアドバタイズする",
  "bluetooth.advertiseUrl|block": "Bluetooth URLをアドバタイズ %url|出力強度 %power|接続可能 %connectable",
  "bluetooth.advertiseUrl|param|connectable": "他のサービスに接続可能のままにするには真、そうでないなら偽。",
  "bluetooth.advertiseUrl|param|power": "0～7の範囲の送信強度。たとえば：7",
  "bluetooth.advertiseUrl|param|url": "送信するURL。EddystoneがサポートするURL長以下である必要があります。たとえば：\"https://makecode.com\"",
  "bluetooth.onBluetoothConnected": "micro:bitがBluetoothで接続されたときに実行するコードを登録します。",
  "bluetooth.onBluetoothConnected|block": "Bluetooth 接続されたとき",
  "bluetooth.onBluetoothConnected|param|body": "Bluetoothが接続されたときに実行するコード",
  "bluetooth.onBluetoothDisconnected": "micro:bitのBluetooth接続が切断されたときに実行するコードを登録します。",
  "bluetooth.onBluetoothDisconnected|block": "Bluetooth 接続が切断されたとき",
  "bluetooth.onBluetoothDisconnected|param|body": "Bluetooth接続が切断されたときに実行するコード",
  "bluetooth.onUartDataReceived|block": "Bluetooth|データを受信したとき|区切り文字 %delimiters=serial_delimiter_conv",
  "bluetooth.onUartDataReceived|param|delimiters": "受信した文字と照らし合わせる区切り文字（1文字以上）",
  "bluetooth.setTransmitPower": "Bluetoothの送信強度を、最小0から最大7の間で設定します。",
  "bluetooth.setTransmitPower|block": "Bluetooth 送信強度を設定 %power",
  "bluetooth.setTransmitPower|param|power": "0～7の範囲の送信強度。たとえば：7",
  "bluetooth.startAccelerometerService": "Bluetooth加速度計サービスを開始します。",
  "bluetooth.startAccelerometerService|block": "Bluetooth 加速度計サービス",
  "bluetooth.startButtonService": "Bluetoothボタンサービスを開始します。",
  "bluetooth.startButtonService|block": "Bluetooth ボタンサービス",
  "bluetooth.startIOPinService": "Bluetooth入出力端子サービスを開始します。",
  "bluetooth.startIOPinService|block": "Bluetooth 入出力端子サービス",
  "bluetooth.startLEDService": "Bluetooth LEDサービスを開始します。",
  "bluetooth.startLEDService|block": "Bluetooth LEDサービス",
  "bluetooth.startMagnetometerService": "Bluetooth磁力計サービスを開始します。",
  "bluetooth.startMagnetometerService|block": "Bluetooth 磁力計サービス",
  "bluetooth.startTemperatureService": "Bluetooth温度計サービスを開始します。",
  "bluetooth.startTemperatureService|block": "Bluetooth 温度計サービス",
  "bluetooth.startUartService": "Bluetooth UARTサービスを開始する",
  "bluetooth.startUartService|block": "Bluetooth UARTサービス",
  "bluetooth.stopAdvertising": "Eddystoneエンドポイントのアドバタイズを停止する",
  "bluetooth.stopAdvertising|block": "Bluetooth アドバタイズを停止",
  "bluetooth.uartReadUntil": "Bluetooth UARTサービスのバッファーを読み、指定された区切り文字が見つかった場合にその内容を返します。",
  "bluetooth.uartReadUntil|block": "Bluetooth UART|つぎのいずれかの文字の手前まで読み取る %del=serial_delimiter_conv",
  "bluetooth.uartWriteLine": "Bluetooth UARTサービスのバッファーに書き込みます。バッファーに書き込まれたデータは、Bluetoothを経由して、接続されたデバイスに送信されます。",
  "bluetooth.uartWriteNumber|block": "Bluetooth UART|数値を文字で書き出す %value",
  "bluetooth.uartWriteString": "Bluetooth UARTサービスのバッファーに書き込みます。バッファーに書き込まれたデータは、Bluetoothを経由して、接続されたデバイスに送信されます。",
  "bluetooth.uartWriteString|block": "Bluetooth UART|文字列を書き出す %data",
  "bluetooth.uartWriteValue|block": "Bluetooth UART|名前と値を書き出す %name|= %value",
  "bluetooth.uartWriteValue|param|name": "値の名前。たとえば：x",
  "bluetooth.uartWriteValue|param|value": "送信する値。",
  "bluetooth|block": "Bluetooth",
  "console.logValue|param|value": "送信する値。",
  "control": "ランタイムおよびイベントユーティリティ",
  "control.assert": "条件が偽の場合、シリアルコンソールにメッセージを表示して、コード 098 でパニックを発生させます。",
  "control.deviceName|block": "固有の名前",
  "control.deviceSerialNumber": "内部データからこのデバイスの一意かつ不変なシリアル番号を取得します。",
  "control.deviceSerialNumber|block": "シリアル番号",
  "control.eventSourceId": "C++ ランタイムの定数の値を返します",
  "control.eventSourceId|block": "%id",
  "control.eventTimestamp": "バス上で最後に実行されたイベントのタイムスタンプを取得します",
  "control.eventTimestamp|block": "イベントのタイムスタンプ",
  "control.eventValue": "バス上で最後に実行されたイベントの値を取得します",
  "control.eventValueId": "C++ ランタイムの定数の値を返します",
  "control.eventValueId|block": "%id",
  "control.eventValue|block": "イベントの値",
  "control.inBackground": "コードをバックグラウンドで実行します。",
  "control.inBackground|block": "バックグラウンドで実行する",
  "control.onEvent": "イベントバスでイベントを発生させます。",
  "control.onEvent|block": "イベントが届いたとき|発生源 %src=control_event_source_id|値 %value=control_event_value_id",
  "control.panic": "指定されたエラーコードを表示し、プログラムを停止します。",
  "control.raiseEvent": "イベントバスでイベントを発生させます。",
  "control.raiseEvent|block": "イベントを発生させる|発生源 %src=control_event_source_id|値 %value=control_event_value_id",
  "control.raiseEvent|param|mode": "構築後にイベントを処理する方法のオプション定義（既定値は CREATE_AND_FIRE です）。",
  "control.raiseEvent|param|src": "イベントを生成した MicroBit コンポーネントの ID（例：MICROBIT_ID_BUTTON_A）。",
  "control.raiseEvent|param|value": "イベントの原因を示すコンポーネント固有のコード。",
  "control.reset": "BBC micro:bitをリセットします。",
  "control.reset|block": "リセット",
  "control.runtimeWarning": "シミュレーターで警告を表示します。",
  "control.waitMicros": "現在の実行ファイバーを、指定された時間だけ停止します（マイクロ秒）。",
  "control.waitMicros|block": "全体を一時停止（マイクロ秒） %micros",
  "control.waitMicros|param|micros": "待機する時間（マイクロ秒）。たとえば：4",
  "control|block": "制御",
  "convertToText|block": "数値 $value=math_number を文字列に変換する",
  "devices": "BBC micro:bitで、Bluetoothで接続したスマートフォンを制御する。",
  "devices.onGamepadButton": "Bluetoothで接続したゲームパッドからコマンドを受信したときに実行するコードを登録します。",
  "devices.onGamepadButton|block": "ゲームパッドのボタン|%NAME|とき",
  "devices.onGamepadButton|param|body": "ボタンが押されたときに実行するコード",
  "devices.onGamepadButton|param|name": "ボタンの名前",
  "devices.onNotified": "Bluetooth接続機器から、何らかのイベントを受信したときに実行するコードを登録します。",
  "devices.onNotified|block": "イベント|%event|が通知されたとき",
  "devices.onNotified|param|body": "イベントが通知されたときに実行するコード",
  "devices.onNotified|param|event": "イベントの指定",
  "devices.onSignalStrengthChanged": "Bluetooth接続機器から、その信号受信強度が変わったという通知を受信したときに実行するコードを登録します。",
  "devices.onSignalStrengthChanged|block": "信号強度が変わったとき",
  "devices.onSignalStrengthChanged|param|body": "信号受信強度が変わったときに実行するコード。",
  "devices.raiseAlertTo": "親機器に対して「アラート」コマンドを送信します。",
  "devices.raiseAlertTo|block": "アラートを送信する|%property",
  "devices.raiseAlertTo|param|event": "イベントの指定",
  "devices.signalStrength": "接続された機器から報告された信号受信強度の最新の値を返します。",
  "devices.signalStrength|block": "信号強度",
  "devices.tellCameraTo": "親機器に対して「カメラ」コマンドを送信します。",
  "devices.tellCameraTo|block": "カメラに指示する|%property",
  "devices.tellCameraTo|param|event": "イベントの指定",
  "devices.tellRemoteControlTo": "親機器に対して音楽プレーヤーの「リモコン」コマンドを送信します。",
  "devices.tellRemoteControlTo|block": "音楽プレーヤーに指示する|%property",
  "devices.tellRemoteControlTo|param|event": "イベントの指定",
  "devices|block": "Bluetooth接続機器",
  "game": "LED1個のスプライトを使うゲームエンジン",
  "game.LedSprite": "LED1個で描かれるゲームスプライト",
  "game.LedSprite.blink": "スプライトの ``点滅`` の長さを報告します。",
  "game.LedSprite.brightness": "スプライトの``明るさ``をLED画面に報告します",
  "game.LedSprite.change": "スプライトのプロパティを変更します。",
  "game.LedSprite.changeBlinkBy": "``点滅``の長さを指定した長さ（ミリ秒）に変更します",
  "game.LedSprite.changeBrightnessBy": "``y``方向の位置を指定した値だけ変更します",
  "game.LedSprite.changeBrightnessBy|param|value": "明るさを変更する値",
  "game.LedSprite.changeDirectionBy": "指定した角度で``向き``を右方向に回転します",
  "game.LedSprite.changeXBy": "``x``方向の位置を指定した値だけ変更します",
  "game.LedSprite.changeYBy": "``y``方向の位置を指定した値だけ変更します",
  "game.LedSprite.change|block": "%sprite(スプライト)|の %property|を %value|だけ増やす",
  "game.LedSprite.change|param|property": "変更するプロパティの名前",
  "game.LedSprite.change|param|value": "変更する量。たとえば：1",
  "game.LedSprite.delete": "ゲームエンジンからスプライトを削除します。スプライトは画面に表示されたり、他のスプライトと連動したりすることはなくなります。",
  "game.LedSprite.delete|block": "%this(スプライト)|を削除",
  "game.LedSprite.direction": "スプライトの現在の方向を報告します。",
  "game.LedSprite.get": "スプライトのプロパティを取得します。",
  "game.LedSprite.get|block": "%sprite(スプライト)|の %property",
  "game.LedSprite.get|param|property": "変更するプロパティの名前",
  "game.LedSprite.goTo": "画面上のこの位置に移動します。",
  "game.LedSprite.ifOnEdgeBounce": "ステージの端にあり、端の方向を向いている場合は向きを変えます。",
  "game.LedSprite.ifOnEdgeBounce|block": "%sprite(スプライト)|が端にあれば反射させる",
  "game.LedSprite.isTouching": "スプライトが指定したスプライトと同じ位置を持つ場合に真を報告します。",
  "game.LedSprite.isTouchingEdge": "スプライトが端にある場合に真を報告します。",
  "game.LedSprite.isTouchingEdge|block": "%sprite(スプライト)|が端にある",
  "game.LedSprite.isTouching|block": "%sprite(スプライト)|が他のスプライト %other|にさわっている",
  "game.LedSprite.move": "特定番号の LED を現在の方向に移動します。",
  "game.LedSprite.move|block": "%sprite(スプライト)|を %leds|ドット進める",
  "game.LedSprite.move|param|leds": "移動する LED の数。たとえば：1、-1",
  "game.LedSprite.off": "スプライトをオフにします（省略時はオン）。",
  "game.LedSprite.on": "スプライトをオンにします（省略時はオン）。",
  "game.LedSprite.set": "スプライトのプロパティを設定します。",
  "game.LedSprite.setBlink": "点滅間隔をミリ秒単位で設定します。",
  "game.LedSprite.setBrightness": "スプライトの ``明るさ`` を設定します",
  "game.LedSprite.setBrightness|param|brightness": "0 (オフ) から 255 (オン) までの明るさ。たとえば：255",
  "game.LedSprite.setDirection": "現在のスプライトの方向を 45 に最も近い倍数に丸めた値に設定します。",
  "game.LedSprite.setX": "スプライトの位置の ``x`` 軸の値を設定します",
  "game.LedSprite.setY": "スプライトの位置の ``y`` 軸の値を設定します",
  "game.LedSprite.set|block": "%sprite(スプライト)|の %property|に %value|を設定する",
  "game.LedSprite.set|param|property": "変更するプロパティの名前",
  "game.LedSprite.turn": "スプライトを回転します。",
  "game.LedSprite.turnLeft": "左に回転（反時計回り）します。",
  "game.LedSprite.turnRight": "右に回転（時計回り）します。",
  "game.LedSprite.turn|block": "%sprite(スプライト)|方向転換 %direction|に %degrees|°",
  "game.LedSprite.turn|param|degrees": "回転する角度。たとえば、45、90、180、135",
  "game.LedSprite.turn|param|direction": "左または右",
  "game.LedSprite.x": "LED画面上のスプライトの位置の``x``軸の値を返します。",
  "game.LedSprite.y": "LED画面上のスプライトの位置の``y``軸の値を返します。",
  "game.addLife|block": "ライフ数を %lives だけ増やす",
  "game.addLife|param|lives": "TODO",
  "game.addScore": "点数を増減し、ちょっとしたアニメーションを表示します。",
  "game.addScore|block": "点数を%points|だけ増やす",
  "game.addScore|param|points": "増減する点数（マイナスなら減らす）。たとえば：1",
  "game.createSprite": "右方向に新しい LED スプライトを作成します。",
  "game.createSprite|block": "スプライトを作成|X: %x|Y: %y",
  "game.createSprite|param|x": "スプライトの水平座標。たとえば：2",
  "game.createSprite|param|y": "スプライトの垂直座標。たとえば：2",
  "game.currentTime": "残り時間（`カウントダウンを開始`以降）または現在時刻（デバイス起動時または`ストップウォッチを開始`以降）をミリ秒で取得します。",
  "game.gameOver": "ゲームオーバーのアニメーションと点数を表示します。",
  "game.gameOver|block": "ゲームオーバー",
  "game.invalidSprite": "無効なスプライトを取得します。ローカルの初期化に使用します。",
  "game.isGameOver|block": "ゲームオーバーである",
  "game.isPaused": "ゲームの画面表示を一時停止していて、他のアニメーションが可能であるかどうかを示します。",
  "game.isPaused|block": "一時停止中である",
  "game.isRunning|block": "ゲーム中である",
  "game.level": "現在のレベルを取得します",
  "game.levelUp": "レベルを繰り上げ、メッセージを表示します。",
  "game.life": "現在のライフを取得します",
  "game.pause": "ゲームの画面表示を一時停止して、他のアニメーションの表示を可能にします。",
  "game.pause|block": "一時停止",
  "game.removeLife|block": "ライフ数を %life だけ減らす",
  "game.removeLife|param|life": "TODO",
  "game.resume": "ゲームの画面表示を再開します。",
  "game.resume|block": "再開する",
  "game.score": "現在の点数を返します。",
  "game.score|block": "点数",
  "game.setLife": "現在のライフ値を設定します",
  "game.setLife|block": "ライフ数を %value にする",
  "game.setLife|param|value": "TODO",
  "game.setScore": "現在の点数を設定します。",
  "game.setScore|block": "点数を%points|にする",
  "game.setScore|param|value": "新しい点数",
  "game.showScore": "画面にスコアを表示します。",
  "game.startCountdown": "ゲーム開始を示すアニメーションを表示し、カウントダウンタイマーを開始します。カウントダウンタイマーがゼロになると、ゲームオーバーです。",
  "game.startCountdown|block": "カウントダウンを開始（ミリ秒） %duration",
  "game.startCountdown|param|ms": "ゲームオーバーまでの時間数（ミリ秒）。たとえば：10000",
  "game.startStopwatch": "ストップウォッチタイマーを開始します。`現在時刻`は経過時間を返します。",
  "game|block": "ゲーム",
  "images": "LED画像の作成、操作と表示。",
  "images.arrowImage|block": "矢印の画像 %i=device_arrow",
  "images.arrowNumber|block": "%arrow",
  "images.createBigImage": "LED画面2個ぶんの画像を作成する。",
  "images.createBigImage|block": "大きな画像を作成",
  "images.createImage": "LED画面の大きさの画像を作成する。",
  "images.createImage|block": "画像を作成",
  "images.iconImage|block": "アイコンの画像 %i",
  "images|block": "画像",
  "input": "センサーからのイベントとデータ",
  "input.acceleration": "加速度を読み取ります（LED画面を上に向けて置いたとき、xとyは0、zは-1024になります）。",
  "input.acceleration|block": "加速度|%NAME",
  "input.buttonIsPressed": "``A`` か ``B`` のボタンが押されているかを取得します。",
  "input.buttonIsPressed|block": "ボタン|%NAME|が押されている",
  "input.buttonIsPressed|param|button": "どのボタンの状態を調べるか。たとえば：Button.A",
  "input.calibrate": "廃止。代わりにinput.calibrateCompassを使ってください。",
  "input.calibrateCompass": "廃止。コンパスの調整は自動です。",
  "input.calibrateCompass|block": "コンパスを調整する",
  "input.compassHeading": "現在の、コンパスの値を取得します。",
  "input.compassHeading|block": "方角（°）",
  "input.isGesture|block": "%gesture 動き",
  "input.lightLevel": "LED画面に当たる光の明るさを 0 (暗い) から 255（明るい）の範囲で返します。",
  "input.lightLevel|block": "明るさ",
  "input.magneticForce": "磁力の大きさをマイクロテスラ（``µT``）で返します。この機能は、シミュレーターでは動作しません。",
  "input.magneticForce|block": "磁力（µT）|%NAME",
  "input.onButtonPressed": "ボタン（``A``、``B``または``AとB``の両方）が押されたときに実行されます。",
  "input.onButtonPressed|block": "ボタン|%NAME|が押されたとき",
  "input.onButtonPressed|param|body": "イベントが発生したときに実行するコード",
  "input.onButtonPressed|param|button": "押す必要のあるボタン",
  "input.onGesture": "ジェスチャ（例えば、ゆさぶる）が行われたときに実行します。",
  "input.onGesture|block": "%NAME|とき",
  "input.onGesture|param|body": "ジェスチャーが行われたときに実行するコード",
  "input.onGesture|param|gesture": "どのジェスチャーが行われるのを待つか。たとえば：Gesture.Shake",
  "input.onLogoDown": "ロゴが下向きで、ボードが垂直の場合に実行するコードを登録します。",
  "input.onLogoUp": "ロゴが上向きで、ボードが垂直の場合に実行するコードを登録します。",
  "input.onPinPressed": "端子がタッチされ、ふたたびタッチされなくなったときに何かを実行します（同時にGND端子にもさわっている必要があります）。",
  "input.onPinPressed|block": "端子 %name|がタッチされたとき",
  "input.onPinPressed|param|body": "端子がタッチされたときに実行するコード",
  "input.onPinPressed|param|name": "タッチされる端子。たとえば：TouchPin.P0",
  "input.onPinReleased": "端子がタッチされなくなったときに実行されます。",
  "input.onPinReleased|block": "端子 %NAME|がタッチされなくなったとき",
  "input.onPinReleased|param|body": "端子がタッチされなくなったときに実行するコード",
  "input.onPinReleased|param|name": "タッチされなくなる端子。たとえば：TouchPin.P0",
  "input.onScreenDown": "LED画面が下向きの場合に実行するコードを登録します。",
  "input.onScreenUp": "LED画面が上向きの場合に実行するコードを登録します。",
  "input.onShake": "ゆさぶられた場合に実行するコードを登録します。",
  "input.pinIsPressed": "端子がタッチされているかどうかの状態を取得します。タッチされているかを調べるために、同時にGNDにもさわっている必要があります。",
  "input.pinIsPressed|block": "端子 %NAME|がタッチされている",
  "input.pinIsPressed|param|name": "タッチを検出する端子。たとえば：TouchPin.P0",
  "input.rotation": "デバイスの、ピッチかロールを度数で取得します。",
  "input.rotation|block": "傾斜（°）|%NAME",
  "input.runningTime": "電源が入ってから経過したミリ秒数を取得します。",
  "input.runningTimeMicros": "電源が入ってから経過したマイクロ秒数を取得します。",
  "input.runningTimeMicros|block": "稼働時間（マイクロ秒）",
  "input.runningTime|block": "稼働時間（ミリ秒）",
  "input.setAccelerometerRange": "加速度センサーの計測範囲を重力加速度の単位で設定します。",
  "input.setAccelerometerRange|block": "加速度センサーの計測範囲を設定する %range",
  "input.setAccelerometerRange|param|range": "加速度センサーが計測できる最大値を示す値",
  "input.temperature": "摂氏で、温度を取得します。",
  "input.temperature|block": "温度（℃）",
  "input|block": "入力",
  "led": "LED画面の制御",
  "led.brightness": "画面の明るさを 0 (オフ) 255 (フルに明るい)の範囲で取得します。",
  "led.brightness|block": "明るさ",
  "led.displayMode": "現在の表示モード（白黒あるいはグレースケール）を取得します。",
  "led.enable": "画面を表示、または非表示にします。",
  "led.enable|block": "LED表示を有効にする %on",
  "led.fadeIn": "LED画面をゆっくり明るくする。",
  "led.fadeOut": "LED画面をゆっくり暗くする。",
  "led.plot": "X、Y座標で指定したLEDを点灯します。(0, 0)が左上です。",
  "led.plotAll": "全てのLEDを点灯させる。",
  "led.plotBarGraph": "値（`value`）と最大値（`high`）に基づいて、縦方向の棒グラフを表示する。最大値がゼロの場合には、実際の表示に使用する最大値は自動的に調整されます。",
  "led.plotBarGraph|block": "棒グラフを表示する 値 %value|最大値 %high",
  "led.plotBarGraph|param|high": "最大値。ゼロの場合には、最大値は自動的に調整されます。たとえば：0",
  "led.plotBarGraph|param|value": "表示する値",
  "led.plotBrightness": "X、Y座標 (X は横方向、Y は縦方向) で指定したLEDを指定の明るさで点灯します。(0, 0) が左上です。",
  "led.plotBrightness|block": "点灯|x %x|y %y|明るさ %brightness",
  "led.plotBrightness|param|brightness": "0（オフ）から255（明るい）までの明るさ。たとえば：255",
  "led.plotBrightness|param|x": "TODO",
  "led.plotBrightness|param|y": "TODO",
  "led.plot|block": "点灯|x %x|y %y",
  "led.plot|param|x": "TODO",
  "led.plot|param|y": "TODO",
  "led.point": "X、Y座標で指定されたLEDの、ON/OFFの状態を取得します。(0,0)が左上です。",
  "led.point|block": "LED x %x|y %y|が点灯している",
  "led.screenshot": "LED画面の状態を記録し、画像として返します。",
  "led.setBrightness": "画面の明るさを 0 (オフ) 255 (フルに明るい)の範囲で設定します。",
  "led.setBrightness|block": "明るさを設定する %value",
  "led.setBrightness|param|value": "明るさの値。たとえば：255、127、0",
  "led.setDisplayMode": "LED画面をの表示モードを、白黒とグレースケールのいずれかに設定します。",
  "led.setDisplayMode|block": "表示モードを設定する $mode",
  "led.setDisplayMode|param|mode": "指定する表示モード",
  "led.stopAnimation": "現在のアニメーションをキャンセルし、保留中のアニメーションもクリアします。",
  "led.stopAnimation|block": "アニメーションを停止",
  "led.toggle": "指定された場所のLEDの点滅を切り替えます。",
  "led.toggleAll": "LED画面を反転します。",
  "led.toggle|block": "反転|x %x|y %y",
  "led.unplot": "X、Y座標で指定された場所のLEDを消灯します。(0, 0) は左上です。",
  "led.unplot|block": "消灯|x %x|y %y",
  "led|block": "LED",
  "music": "音楽のための音の生成",
  "music.beat": "拍の長さをミリ秒で返します",
  "music.beat|block": "%fraction|拍",
  "music.beginMelody": "メロディの再生を開始します。メロディは、「音階[オクターブ][:長さ]」の組み合わせを複数個文字列に入れた形で表します（「[  ]」で囲んだ部分は省略可能という意味、「[  ]」そのものは使わない）。",
  "music.beginMelody|block": "メロディを開始する %melody=device_builtin_melody|くり返し %options",
  "music.beginMelody|param|options": "メロディのオプション。1回だけまたはずっと。フォアグラウンドまたはバックグラウンド。",
  "music.builtInMelody": "元から入っているメロディを取り出す。",
  "music.builtInMelody|block": "%melody",
  "music.changeTempoBy": "テンポを指定した数だけ増減します。",
  "music.changeTempoBy|block": "テンポを増やす（bpm）|%value",
  "music.changeTempoBy|param|bpm": "テンポ（1分間の拍数）を増減させる度合い。たとえば：20",
  "music.noteFrequency": "音符の周波数を返します。",
  "music.noteFrequency|block": "%name",
  "music.onEvent": "メロディに関するいろいろなイベントが発生したときに行う動作を登録します。",
  "music.onEvent|block": "音楽 %value とき",
  "music.playTone": "指定された長さの間、``P0``端子を使って音を出します。",
  "music.playTone|block": "音を鳴らす|高さ（Hz） %note=device_note|長さ %duration=device_beat",
  "music.playTone|param|ms": "音の長さ（ミリ秒）",
  "music.rest": "``P0``端子で、指定された時間だけ音を出さないようにします。",
  "music.rest|block": "休符（ミリ秒）|%duration=device_beat",
  "music.rest|param|ms": "残り時間(ミリ秒)",
  "music.ringTone": "``P0``端子を使って音を出します。",
  "music.ringTone|block": "音を鳴らす|高さ（Hz） %note=device_note",
  "music.setPlayTone": "メロディを再生する際に使用する、音を出す関数を独自に設定します。",
  "music.setTempo": "テンポを設定します",
  "music.setTempo|block": "テンポを設定する（bpm）|%value",
  "music.setTempo|param|bpm": "新しいテンポ（1分間の拍数）の値。たとえば：120",
  "music.stopMelody|block": "メロディを停止する $options",
  "music.tempo": "現在のテンポを、1分間あたりの拍数で返します。テンポの値が大きくなると、より早く音楽が再生されます。",
  "music.tempo|block": "テンポ（bpm）",
  "music|block": "音楽",
  "parseFloat|block": "文字列 %text|を数値に変換する",
  "parseInt": "文字列を整数に変換します。",
  "parseInt|block": "文字列 %text|を整数に変換する",
  "pins.analogPitch|block": "音を鳴らす（Hz） %frequency| 長さ（ミリ秒） %ms",
  "pins.analogPitch|param|frequency": "変調周波数（Hz）",
  "pins.analogPitch|param|ms": "音の長さ（ミリ秒）",
  "pins.analogReadPin": "端子に来ている電圧を、0～1023の範囲の値として読み取る。",
  "pins.analogReadPin|block": "アナログ値を読み取る|端子 %name",
  "pins.analogReadPin|param|name": "出力先の端子。たとえば：AnalogPin.P0",
  "pins.analogSetPeriod|block": "アナログ出力 パルス周期を設定する|端子 %pin|周期（マイクロ秒） %micros",
  "pins.analogSetPeriod|param|micros": "パルス幅変調の周期。たとえば：20000",
  "pins.analogSetPeriod|param|name": "周期を設定するアナログ出力端子。たとえば：AnalogPin.P0",
  "pins.analogSetPitchPin|block": "音を鳴らす端子を %name|にする",
  "pins.analogSetPitchPin|param|name": "音の信号を出力する端子",
  "pins.analogWritePin": "端子に出力する電圧を、0～1023の範囲の値として設定する。",
  "pins.analogWritePin|block": "アナログで出力する|端子 %name|値 %value",
  "pins.analogWritePin|param|name": "出力先の端子。たとえば：AnalogPin.P0",
  "pins.analogWritePin|param|value": "出力する電圧を示す、0～1023の範囲の値。たとえば：1023、0",
  "pins.createBuffer": "新しくゼロで初期化したバッファーを作成します。",
  "pins.createBuffer|param|size": "バッファー内のバイト数",
  "pins.digitalReadPin": "端子に来ている電圧を、0か1として読み取る。",
  "pins.digitalReadPin|block": "デジタルで読み取る|端子 %name",
  "pins.digitalReadPin|param|name": "読み取る端子。たとえば：DigitalPin.P0",
  "pins.digitalWritePin": "端子に出力する電圧を、0か1で設定する。",
  "pins.digitalWritePin|block": "デジタルで出力する|端子 %name|値 %value",
  "pins.digitalWritePin|param|name": "出力先の端子。たとえば：DigitalPin.P0",
  "pins.digitalWritePin|param|value": "設定する値。たとえば：0、1",
  "pins.i2cReadBuffer": "7ビット I2C の`アドレス` から `サイズ` バイトを読み込みます。",
  "pins.i2cReadNumber": "7ビットのI2Cアドレスを指定して、1個の数値を読み込む。",
  "pins.i2cReadNumber|block": "I2C 数値を読み取る|アドレス %address|形式 %format=i2c_sizeof|つづく %repeat",
  "pins.i2cWriteBuffer": "7ビット I2C の`アドレス` にバイトを書き込みます。",
  "pins.i2cWriteNumber": "7ビットのI2Cアドレスを指定して、1個の数値を書き込む。",
  "pins.i2cWriteNumber|block": "I2C 数値を書き出す|アドレス %address|数値 %value|形式 %format=i2c_sizeof|つづく %repeat",
  "pins.map|block": "数値をマップする %value|元の下限 %fromLow|元の上限 %fromHigh|結果の下限 %toLow|結果の上限 %toHigh",
  "pins.map|param|fromHigh": "元の値の上限。たとえば：1023",
  "pins.map|param|fromLow": "元の値の下限。",
  "pins.map|param|toHigh": "結果の値の上限。たとえば：4",
  "pins.map|param|toLow": "結果の値の下限。",
  "pins.map|param|value": "変換する、元の値。",
  "pins.onPulsed|block": "端子 %pin|に %pulse|が入力されたとき",
  "pins.onPulsed|param|name": "変化を調べるデジタル端子。たとえば：DigitalPin.P0",
  "pins.onPulsed|param|pulse": "パルスの種類。たとえば：PulseValue.High",
  "pins.pulseDuration|block": "受け取ったパルスの長さ（マイクロ秒）",
  "pins.pulseIn|block": "パルスの長さを測る（マイクロ秒）|端子 %name|パルス %value",
  "pins.pulseIn|param|name": "変化を調べるデジタル端子。たとえば：DigitalPin.P0",
  "pins.pulseIn|param|value": "パルスの種類。たとえば：PulseValue.High",
  "pins.servoSetPulse|block": "サーボ 設定する|端子 %value|パルス幅（マイクロ秒） %micros",
  "pins.servoSetPulse|param|micros": "パルスの幅。たとえば：1500",
  "pins.servoSetPulse|param|name": "端子",
  "pins.servoWritePin|block": "サーボ 出力する|端子 %name|角度 %value",
  "pins.servoWritePin|param|name": "出力先の端子。たとえば：AnalogPin.P0",
  "pins.servoWritePin|param|value": "角度または回転速度。たとえば：180、90、0",
  "pins.setEvents|block": "端子 %pin|が発生するイベントの種類を設定する %type",
  "pins.setEvents|param|name": "イベントモードを設定する対象の端子。たとえば：DigitalPin.P0",
  "pins.setEvents|param|type": "この端子が発生するイベントの種類。たとえば：PinEventType.Edge",
  "pins.setPull|block": "端子 %pin|のプルアップ・プルダウンを設定する %pull",
  "pins.setPull|param|name": "プルアップまたはプルダウンを設定する端子。たとえば：DigitalPin.P0",
  "pins.setPull|param|pull": "プルアップ、プルダウン、開放のいずれかのモード。たとえば：PinPullMode.PullUp",
  "pins.sizeOf": "指定した数値形式のサイズをバイト単位で取得します。",
  "pins.spiFormat|block": "SPI 形式を設定する|ビット数 %bits|モード %mode",
  "pins.spiFormat|param|bits": "ビット数。たとえば：8",
  "pins.spiFormat|param|mode": "モード。たとえば：3",
  "pins.spiFrequency|block": "SPI 周波数を設定する（Hz） %frequency",
  "pins.spiFrequency|param|frequency": "クロック周波数。たとえば：1000000",
  "pins.spiPins|block": "SPI 端子を決める|MOSI %mosi|MISO %miso|SCK %sck",
  "pins.spiWrite": "SPIのスレーブに対してデータを送信し、受け取った応答を返します。",
  "pins.spiWrite|block": "SPI 書き出す %value",
  "pins.spiWrite|param|value": "SPIのスレーブに対して送信するデータ。",
  "pins|block": "端子",
  "radio": "無線パケットを使ってデータ通信を行います。",
  "radio.Packet.receivedBuffer": "バッファーがこのパケットまたは空のバッファーに送信された場合のバッファーのデータ",
  "radio.Packet.receivedNumber": "このパケットが数値を含んでいる場合（``sendNumber()``または``sendValue()``で送信された場合）はその数値、数値を含んでいない場合は0を返します。",
  "radio.Packet.receivedString": "このパケットが文字列を含んでいる場合（``sendString()``または``sendValue()``で送信された場合）はその文字列、文字列を含んでいない場合はからの文字列を返します。",
  "radio.Packet.serial": "このパケットが送信側のmicro:bitのシリアル番号を含んでいる場合はその番号、シリアル番号を含んでいない場合は0を返します。",
  "radio.Packet.signal": "パケットを受信したときの電波の電波強度（RSSI）を返します。",
  "radio.Packet.time": "このパケットが送信されたときの、送信側のシステム時刻を返します。",
  "radio._packetProperty|block": "%note",
  "radio.onDataPacketReceived|block": "無線で受信したとき",
  "radio.onDataReceived": "無線通信でパケットを受信したときに実行するコードを登録します。",
  "radio.onDataReceived|block": "無線でデータを受信したとき",
  "radio.onReceivedBufferDeprecated|block": "無線で受信したとき",
  "radio.onReceivedBuffer|block": "無線で受信したとき",
  "radio.onReceivedNumberDeprecated|block": "無線で受信したとき",
  "radio.onReceivedNumber|block": "無線で受信したとき",
  "radio.onReceivedStringDeprecated|block": "無線で受信したとき",
  "radio.onReceivedString|block": "無線で受信したとき",
  "radio.onReceivedValueDeprecated|block": "無線で受信したとき",
  "radio.onReceivedValue|block": "無線で受信したとき",
  "radio.raiseEvent|block": "無線でイベントを送信する|発生源 %src=control_event_source_id|値 %value=control_event_value_id",
  "radio.receiveNumber": "無線受信キューから次のパケットを読み取り、パケットに含まれる数値データを返します。数値データが含まれない場合には、ゼロを返します。",
  "radio.receiveNumber|block": "無線で受信した数値",
  "radio.receiveString": "無線受信キューから次のパケットを読み取り、パケットに含まれる文字列データを返します。文字列データが含まれない場合には、カラの文字列を返します。",
  "radio.receiveString|block": "無線で受信した文字列",
  "radio.receivedBuffer": "無線受信キューから（``receiveNumber``、``receiveString``などによって）最後のパケットを読み取り、バッファーに含まれるデータを返します。文字列が含まれない場合には、空文字を返します。",
  "radio.receivedNumber": "無線受信キューから（``receiveNumber``、``receiveString``などによって）最後のパケットを読み取り、数値データを返します。数値が含まれない場合には、ゼロを返します。",
  "radio.receivedPacket|block": "受信したパケットの %type=radio_packet_property",
  "radio.receivedSerial": "無線受信キューから（``receiveNumber``、``receiveString``などによって）最後のパケットを読み取り、送信元 micro:bit のシリアル番号を返します。シリアル番号が含まれない場合には、ゼロを返します。",
  "radio.receivedSignalStrength": "無線受信キューから（``receiveNumber``、``receiveString``などによって）読み取ったパケットから、受信信号強度（RSSI）の値を取り出します。シミュレーターでは動作しません。",
  "radio.receivedSignalStrength|block": "通信相手が受信した電波の強さ",
  "radio.receivedString": "無線受信キューから（``receiveNumber``、``receiveString``などによって）最後のパケットを読み取り、文字列データを返します。文字列が含まれない場合には、空文字を返します。",
  "radio.receivedTime": "無線受信キューから（``receiveNumber``、``receiveString``などによって）最後のパケットを読み取り、送信元 micro:bit からのパケット送信時のシステム時刻を返します。",
  "radio.sendBuffer": "無線通信で、同じグループに属するmicro:bitに対して、バッファー（最大長 19 バイト）に加えて、デバイスのシリアル番号と連続稼働時間数を送信します。",
  "radio.sendNumber": "無線通信で、同じグループに属するmicro:bitに対して、数値を送信します。",
  "radio.sendNumber|block": "無線で数値を送信 %value",
  "radio.sendString": "無線通信で、同じグループに属するmicro:bitに対して、文字列に加えて、デバイスのシリアル番号と連続稼働時間数を送信します。",
  "radio.sendString|block": "無線で文字列を送信 %msg",
  "radio.sendValue|block": "無線で送信 | %name |= %value",
  "radio.setGroup": "無線通信のグループIDを設定します。同じグループIDが設定されたmicro:bitからのパケットだけを受信します。グループIDは、0～255の間で指定できます。",
  "radio.setGroup|block": "無線のグループを設定 %ID",
  "radio.setGroup|param|id": "グループID（``0``～``255``）。たとえば：1",
  "radio.setTransmitPower": "無線通信での送信強度を変更します。",
  "radio.setTransmitPower|block": "無線の送信強度を設定 %power",
  "radio.setTransmitPower|param|power": "送信強度を示す0～7の範囲の数値（0が最も小さく、7が最も大きい）。たとえば：7",
  "radio.setTransmitSerialNumber": "無線通信で、シリアル番号を送信するかどうかを設定します。",
  "radio.setTransmitSerialNumber|block": "シリアル番号の送信の有無を設定 %transmit",
  "radio.setTransmitSerialNumber|param|transmit": "シリアル番号を送信するかどうかを示す値。たとえば：true",
  "radio.writeReceivedPacketToSerial": "最後に受信したパケットを、JSON形式でシリアル通信で書き出します。呼び出すのは、コールバック「``onDataPacketReceived``」の中である必要があります。",
  "radio.writeReceivedPacketToSerial|block": "無線で最後に受信したパケットをシリアルポートに書き込む",
  "radio.writeValueToSerial": "無線受信キューから次のパケットを読み取り、JSON形式でシリアル通信で書き出します。",
  "radio.writeValueToSerial|block": "無線で受信してシリアルポートに書き込む",
  "radio|block": "無線",
  "serial": "シリアル接続を使ってデータを送受信する。",
  "serial.delimiters": "区切り記号に対応する文字列を返します",
  "serial.delimiters|block": "%del",
  "serial.onDataReceived|block": "シリアル通信|つぎのいずれかの文字を受信したとき %delimiters=serial_delimiter_conv",
  "serial.onDataReceived|param|delimiters": "受信した文字と照らし合わせる区切り文字（1文字以上）",
  "serial.readBuffer": "rxBuffから複数の文字を読み取り、バッファーに格納します。",
  "serial.readBuffer|block": "シリアル通信|バッファーに読み取る 最大文字数 %length",
  "serial.readBuffer|param|length": "省略時のバッファーの長さ（たとえば64）",
  "serial.readLine|block": "シリアル通信|1行読み取る",
  "serial.readString|block": "シリアル通信|文字列を読み取る",
  "serial.readUntil|block": "シリアル通信|つぎのいずれかの文字の手前まで読み取る %delimiter=serial_delimiter_conv",
  "serial.readUntil|param|delimiter": "文字のかたまりを区切る区切り文字が、1文字以上入っている文字列",
  "serial.redirect": "シリアル通信でUSBTXおよびUSBRX以外の端子を使うように、動的に変更する。",
  "serial.redirectToUSB": "シリアル通信の入出力を USB 接続にリダイレクトします。",
  "serial.redirectToUSB|block": "シリアル通信|USBにリダイレクト",
  "serial.redirect|block": "シリアル通信|通信先を変更する|送信端子 %tx|受信端子 %rx|通信速度 %rate",
  "serial.redirect|param|rate": "新しい通信速度。たとえば：115200",
  "serial.redirect|param|rx": "新しい受信端子。たとえば：SerialPin.P1",
  "serial.redirect|param|tx": "新しい送信端子。たとえば：SerialPin.P0",
  "serial.setRxBufferSize|block": "シリアル通信 受信バッファーの大きさを $size|にする",
  "serial.setTxBufferSize|block": "シリアル通信 送信バッファーの大きさを $size|にする",
  "serial.setWriteLinePadding|block": "シリアル通信 1行書き出すときのパディングを $length|文字にする",
  "serial.writeBuffer|block": "シリアル通信|バッファーから書き出す %buffer=serial_readbuffer",
  "serial.writeLine|block": "シリアル通信|1行書き出す %text",
  "serial.writeNumbers|block": "シリアル通信|複数の数値をカンマくぎりで書き出す %values",
  "serial.writeNumber|block": "シリアル通信|数値を文字で書き出す %value",
  "serial.writeString|block": "シリアル通信|文字列を書き出す %text",
  "serial.writeValue|block": "シリアル通信|名前と数値を書き出す %name|= %value",
  "serial.writeValue|param|name": "値の名前。たとえば：x",
  "serial.writeValue|param|value": "送信する値。",
  "serial|block": "シリアル通信",
  "servos.P0|block": "サーボP0",
  "servos.P1|block": "サーボP1",
  "servos.P2|block": "サーボP2",
  "servos.Servo.run|block": "%servo 回転速度 %speed=speedPicker \\%",
  "servos.Servo.setAngle|block": "%servo 角度 %degrees=protractorPicker °",
  "servos.Servo.setPulse|block": "%servo パルス幅の設定（マイクロ秒） %micros(パルス幅（マイクロ秒）)",
  "servos.Servo.setRange": "サーボモーターが回転可能な範囲の最小と最大の角度を、0°から180°の間で設定します。",
  "servos.Servo.setRange|block": "%servo 角度範囲の設定 %minAngle(最小角度) °～ %maxAngle(最大角度) °",
  "servos.Servo.setRange|param|maxAngle": "最大の角度（90°～180°）",
  "servos.Servo.setRange|param|minAngle": "最大の角度（0°～90°）",
  "servos.Servo.setStopOnNeutral|block": "%servo 中央にすると止まる設定 %enabled",
  "servos.Servo.stop|block": "%servo 止める",
  "{id:category}Array": "配列",
  "{id:category}Arrays": "配列",
  "{id:category}Basic": "基本",
  "{id:category}Bluetooth": "Bluetooth",
  "{id:category}Boolean": "真偽値",
  "{id:category}Buffer": "バッファー",
  "{id:category}Console": "コンソール",
  "{id:category}Control": "制御",
  "{id:category}Devices": "Bluetooth接続機器",
  "{id:category}Game": "ゲーム",
  "{id:category}Helpers": "ヘルパー",
  "{id:category}Image": "画像",
  "{id:category}Images": "画像",
  "{id:category}Input": "入力",
  "{id:category}Led": "LED",
  "{id:category}Math": "計算",
  "{id:category}Music": "音楽",
  "{id:category}Number": "数値",
  "{id:category}Pins": "入出力端子",
  "{id:category}Radio": "無線",
  "{id:category}Serial": "シリアル通信",
  "{id:category}Servos": "サーボモーター",
  "{id:category}String": "文字列",
  "{id:category}Text": "文字列",
  "{id:group}Configuration": "設定",
  "{id:group}Continuous": "回転サーボモーター",
  "{id:group}Positional": "普通のサーボモーター"
}